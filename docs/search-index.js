var N=null,E="",T="t",U="u",searchIndex={};
var R=["Utility method to get a Unit from a BaseUnit…","Utility method to get the Joule Unit (composed)","Utility method to get the Coulomb Unit (composed)","result","to_string","string","try_from","try_into","borrow_mut","borrow","to_owned","clone_into","type_id","baseunit","formatter","BaseUnit","ArrayUnit"];
searchIndex["main"]={"doc":E,"i":[],"p":[]};
searchIndex["ndarray_unit"]={"doc":"This crate provides a struct representing a…","i":[[3,"Unit","ndarray_unit",E,N,N],[3,R[16],E,E,N,N],[4,R[15],E,"An enum representing the seven units of the International…",N,N],[13,"METER",E,E,0,N],[13,"SECOND",E,E,0,N],[13,"KILOGRAM",E,E,0,N],[13,"AMPERE",E,E,0,N],[13,"KELVIN",E,E,0,N],[13,"MOLE",E,E,0,N],[13,"CANDELA",E,E,0,N],[13,"RADIAN",E,E,0,N],[13,"STERADIAN",E,E,0,N],[13,"CURRENCY",E,E,0,N],[13,"INHABITANT",E,E,0,N],[13,"BIRTH",E,E,0,N],[13,"DEATH",E,E,0,N],[5,"get_meter",E,R[0],N,[[],["unit"]]],[5,"get_second",E,R[0],N,[[],["unit"]]],[5,"get_candela",E,R[0],N,[[],["unit"]]],[5,"get_mole",E,R[0],N,[[],["unit"]]],[5,"get_kelvin",E,R[0],N,[[],["unit"]]],[5,"get_ampere",E,R[0],N,[[],["unit"]]],[5,"get_radian",E,R[0],N,[[],["unit"]]],[5,"get_steradian",E,R[0],N,[[],["unit"]]],[5,"get_currency",E,E,N,[[],["unit"]]],[5,"get_birth",E,E,N,[[],["unit"]]],[5,"get_death",E,E,N,[[],["unit"]]],[5,"get_inhabitant",E,E,N,[[],["unit"]]],[5,"get_newton",E,R[1],N,[[],["unit"]]],[5,"get_joule",E,R[1],N,[[],["unit"]]],[5,"get_watt",E,"Utility method to get the Watt Unit (composed)",N,[[],["unit"]]],[5,"get_volt",E,"Utility method to get the Volt Unit (composed)",N,[[],["unit"]]],[5,"get_ohm",E,"Utility method to get the Ohm Unit (composed)",N,[[],["unit"]]],[5,"get_siemens",E,"Utility method to get the Siemens Unit (composed)",N,[[],["unit"]]],[5,"get_pascal",E,"Utility metgod to get the Pascal Unit (composed)",N,[[],["unit"]]],[5,"get_coulomb",E,R[2],N,[[],["unit"]]],[5,"get_farad",E,R[2],N,[[],["unit"]]],[5,"get_henry",E,"Utility method to get the Henry Unit (composed)",N,[[],["unit"]]],[5,"get_weber",E,"Utility method to get the Weber Unit (composed)",N,[[],["unit"]]],[5,"get_becquerel",E,"Utility method to get the becquerel Unit (composed)",N,[[],["unit"]]],[5,"get_hertz",E,"Utility method to get the Hertz Unit (composed)",N,[[],["unit"]]],[5,"get_tesla",E,"Utility method to get the Tesla Unit (composed)",N,[[],["unit"]]],[11,"new",E,"Return an Unit with an empty set of `BaseUnit`",1,[[],["unit"]]],[11,"from_vec",E,"Create a Unit from a vector of BaseUnit and their power #…",1,[[["vec"]],["unit"]]],[11,"get_base_units",E,E,1,[[["self"]],["hashmap"]]],[11,"get_inverse",E,"Given an `Unit`, return the inverse of this unit. It…",1,[[["self"]],["unit"]]],[11,"add_single_unit",E,"Add a BaseUnit (and its power) to an existing `mut Unit` #…",1,[[["self"],[R[13]],["i32"]]]],[11,"new",E,E,2,[[["unit"],["arraybase"]],["arrayunit"]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[4],E,E,1,[[["self"]],[R[5]]]],[11,R[6],E,E,1,[[[U]],[R[3]]]],[11,R[7],E,E,1,[[],[R[3]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],["typeid"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[4],E,E,2,[[["self"]],[R[5]]]],[11,R[6],E,E,2,[[[U]],[R[3]]]],[11,R[7],E,E,2,[[],[R[3]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],["typeid"]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[6],E,E,0,[[[U]],[R[3]]]],[11,R[7],E,E,0,[[],[R[3]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],["typeid"]]],[11,"clone",E,E,0,[[["self"]],[R[13]]]],[11,"clone",E,E,1,[[["self"]],["unit"]]],[11,"eq",E,E,0,[[["self"],[R[13]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["unit"]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"fmt",E,E,0,[[["self"],[R[14]]],[R[3]]]],[11,"fmt",E,E,1,[[["self"],[R[14]]],[R[3]]]],[11,"fmt",E,E,1,[[["self"],[R[14]]],[R[3]]]],[11,"fmt",E,E,2,[[["self"],[R[14]]],[R[3]]]]],"p":[[4,R[15]],[3,"Unit"],[3,R[16]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);