var N=null,E="",T="t",U="u",searchIndex={};
var R=["usize","PointerExt","option","either","Apply the function `f` on the value in the `Left` variant…","Apply the function `f` on the value in the `Right` variant…","Factor out a homogeneous type from an either of pairs.","result","into_iter","ordering","formatter","The enum `Either` with variants `Left` and `Right` is a…","A value of type `L`.","A value of type `R`.","interleave","enumerate","Iterate `i` and `j` in lock step.","Format all iterator elements lazily, separated by `sep`.","An iterator which iterates two other iterators…","An iterator adaptor that merges the two base iterators in…","put_back","itertools","is_right","as_ref","as_mut","eitherorboth","map_left","map_right","left_and_then","Apply the function `f` on the value `b` in `Right(b)` or…","right_and_then","Apply the function `f` on the value `a` in `Left(a)` or…","itertools::structs","into_inner","An iterator adaptor to insert a particular value between…","intersperse","Create an iterator which iterates over both this and the…","A “meta iterator adaptor”. Its closure receives a…","batching","Return an iterator adaptor that merges the two base…","merge_join_by","mergejoinby","coalesce","Remove duplicates from sections of consecutive identical…","Return an iterator adaptor that iterates over the…","positions","Combine all an iterator's elements into one element by…","Format all iterator elements, separated by `sep`.","minmaxresult","Return the minimum and maximum element of an iterator, as…","exactlyoneerror","try_from","try_into","borrow_mut","type_id","borrow","typeid","next_back","size_hint","partial_cmp","deref_mut","peeking_next","position","foldwhile","collect","interleaveshortest","whilesome","padusing","iterate","ziplongest","is_left","Return true if the value is the `Left` variant.","Return true if the value is the `Right` variant.","Convert the left side of `Either<L, R>` to an `Option<L>`.","Convert the right side of `Either<L, R>` to an `Option<R>`.","Convert `&Either<L, R>` to `Either<&L, &R>`.","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.","Convert `Either<L, R>` to `Either<R, L>`.","Apply one of two functions depending on contents, unifying…","either_with","Like `either`, but provide some context to whichever of…","Convert the inner value to an iterator.","Return left value or given value","left_or_default","Return left or a default","left_or_else","Returns left value or computes it from a closure","right_or","Return right value or given value","right_or_default","Return right or a default","right_or_else","Returns right value or computes it from a closure","factor_first","factor_second","Extract the value of an either over two equivalent types.","Map `f` over the contained value and return the result in…","MinMaxResult","Position","EitherOrBoth","FoldWhile","PeekingNext","Itertools","Interleave","InterleaveShortest","MapResults","TakeWhileRef","WhileSome","TupleCombinations","Positions","ConsTuples","ExactlyOneError","FormatWith","Intersperse","MergeJoinBy","PeekingTakeWhile","ProcessResults","RepeatCall","TupleBuffer","TupleWindows","WithPosition","ZipLongest","partialord","num_traits","min_value","max_value","neg_infinity","Returns `-0.0`.","Returns the smallest finite value that this type can…","min_positive_value","Returns the smallest positive, normalized value that this…","Returns epsilon, a small positive value.","Returns the largest finite value that this type can…","is_infinite","is_finite","is_normal","Returns `true` if the number is neither zero, infinite,…","Returns the floating point category of the number. If only…","fpcategory","Returns the largest integer less than or equal to a number.","Returns the smallest integer greater than or equal to a…","Returns the nearest integer to a number. Round half-way…","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of `self`. Returns…","Returns a number that represents the sign of `self`.","is_sign_positive","is_sign_negative","Raise a number to an integer power.","to_degrees","to_radians","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","integer_decode","Returns the mantissa, base 2 exponent, and sign as…","Shifts the bits to the left by a specified amount amount,…","Shifts the bits to the right by a specified amount amount,…","num_traits::ops","Fused multiply-add. Computes `(self * a) + b` with only…","Performs the fused multiply-add operation.","checkedmul","The result after applying the operator.","Returns `true` if `self` is positive, including `+0.0`,…","Returns `true` if `self` is negative, including `-0.0`,…","Take the reciprocal (inverse) of a number, `1/x`.","Take the square root of a number.","Returns `e^(self)`, (the exponential function).","Returns `2^(self)`.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an…","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle…","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in…","Computes the arccosine of a number. Return value is in…","Computes the arctangent of a number. Return value is in…","Computes the four quadrant arctangent of `self` (`y`) and…","Simultaneously computes the sine and cosine of the number,…","Returns `e^(self) - 1` in a way that is accurate even if…","Returns `ln(1+n)` (natural logarithm) more accurately than…","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Computes the absolute value.","Returns the sign of the number.","ParseFloatError","FloatErrorKind","ToPrimitive","FromPrimitive","AsPrimitive","FloatCore","FloatConst","CheckedAdd","CheckedSub","CheckedMul","CheckedDiv","CheckedRem","CheckedNeg","CheckedShl","CheckedShr","MulAddAssign","Saturating","WrappingAdd","WrappingSub","WrappingMul","WrappingShl","WrappingShr","integer","Returns the truncated principal `n`th root of an integer…","Returns the truncated principal square root of an integer…","Returns the truncated principal cube root of an integer --…","div_floor","mod_floor","div_mod_floor","extendedgcd","ExtendedGcd","IterBinomial","to_string","parsecomplexerror","complex","add_assign","sub_assign","mul_assign","div_assign","rem_assign","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…","mul_add_assign","ParseComplexError","clone_into","from_isize","from_i128","from_usize","from_u128","toprimitive","from_str_radix","Continue folding with this value","Fold is complete and will return this value","shapeerror","Create a one-dimensional array with elements from `xs`.","Create a two-dimensional array with elements from `xs`.","Create a three-dimensional array with elements from `xs`.","arcarray","An iterator that traverses over the specified axis and…","An iterator that traverses over an axis and and yields…","Exact chunks iterator.","Exact chunks producer and iterable.","errorkind","ndarray::iter","Splits the iterator at `index`, yielding two disjoint…","split_at","Splits the iterator at index, yielding two disjoint…","sliceinfo","fold_while","Apply a function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a predicate.","Include the producer `p` in the Zip.","and_broadcast","Include the producer `p` in the Zip, broadcasting if needed.","Split the `Zip` evenly in two.","arraybase","arrayview","arrayviewmut","Slice the array in place without changing the number of…","Perform unchecked array indexing.","Return a producer and iterable that traverses over the…","Return a producer and iterable that traverses over all 1D…","lanesmut","Return an iterator that traverses over the outermost…","Return an iterator that traverses over `axis` and yields…","axisitermut","Return an iterator that traverses over `axis` by chunks of…","Return an exact chunks producer (and iterable).","arrayview1","arrayviewmut1","Return the array’s data as a slice, if it is contiguous…","Return the array’s data as a slice if it is contiguous,…","Reduce the values along an axis into just one value,…","Return the number of rows (length of `Axis(0)`) in the…","Return the number of columns (length of `Axis(1)`) in the…","Collapses the array to `index` along the axis and removes…","Return the sum of all elements in the array.","ndarray::linalg","ndarray","An array where the data has shared ownership and is copy…","remove_axis","Get a reference of a element through the view.","into_shape","Array representation trait.","__private__","This trait is private to implement; this method exists to…","privatemarker","The element produced per iteration.","Stack arrays along the given axis.","to_owned","_data_slice","try_ensure_unique","try_is_unique","clone_with_ptr","nonnull","into_owned","ownedrepr","into_shared","ownedrcrepr","strideshape","contiguous_stride","into_dimension","slice_mut","into_pattern","insert_axis","size_checked","_fastest_varying_stride_order","max_stride_axis","try_remove_axis","next_for","default_strides","min_stride_axis","first_index","stride_offset","Self is an index, return the stride offset","stride_offset_checked","Return stride offset for this dimension and index.","index_checked","index_unchecked","Convert a mutable array view to a mutable reference of a…","indexediter","ixdynimpl","sliceorindex","Create a one-dimensional array from a vector (no copying…","rangeinclusive","rangefrom","rangetoinclusive","rangeto","rangefull","cowarray","bitand_assign","bitor_assign","bitxor_assign","shl_assign","shr_assign","index_mut","is_zero","For fixed-size dimension representations (e.g. `Ix2`),…","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","as_array_view","Borrow as a read-only array view.","as_array_view_mut","Borrow as a read-write array view.","into_dyn","Convert the dimensional into a dynamic dimensional (IxDyn).","from_shape","from_shape_ptr","into_scalar","into_slice","deref_into_view","Converts to a read-only view of the array.","Split the array view along `axis` and return one array…","AxisDescription","ErrorKind","SliceOrIndex","ShapeError","AxisIterMut","AxisChunksIter","AxisChunksIterMut","SliceInfo","ArrayBase","Dimension","IntoDimension","RemoveAxis","IndexLonger","ShapeBuilder","FixedInitializer","IntoNdProducer","NdProducer","IxDynImpl","OwnedRepr","OwnedArcRepr","RawViewRepr","StrideShape","IndicesIter","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","LanesIter","LanesIterMut","ArrayView","ArrayViewMut","RawArrayView","RawArrayViewMut","description","Utility method to get a Unit from a BaseUnit…","Utility method to get the Joule Unit (composed)","Utility method to get the Coulomb Unit (composed)","baseunit","ArrayUnit"];
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a…","i":[[4,"Either",R[3],R[11],N,N],[13,"Left",E,R[12],0,N],[13,"Right",E,R[13],0,N],[11,R[70],E,R[71],0,[[["self"]],["bool"]]],[11,R[22],E,R[72],0,[[["self"]],["bool"]]],[11,"left",E,R[73],0,[[],[R[2]]]],[11,"right",E,R[74],0,[[],[R[2]]]],[11,R[23],E,R[75],0,[[["self"]],[[R[3]],["r"],["l"]]]],[11,R[24],E,R[76],0,[[["self"]],[["r"],[R[3]],["l"]]]],[11,"flip",E,R[77],0,[[],[R[3]]]],[11,R[26],E,R[4],0,[[["f"]],[R[3]]]],[11,R[27],E,R[5],0,[[["f"]],[R[3]]]],[11,R[3],E,R[78],0,[[["f"],["g"]],[T]]],[11,R[79],E,R[80],0,[[["ctx"],["f"],["g"]],[T]]],[11,R[28],E,R[4],0,[[["f"]],[R[3]]]],[11,R[30],E,R[5],0,[[["f"]],[R[3]]]],[11,R[8],E,R[81],0,[[],[R[3]]]],[11,"left_or",E,R[82],0,[[["l"]],["l"]]],[11,R[83],E,R[84],0,[[],["l"]]],[11,R[85],E,R[86],0,[[["f"]],["l"]]],[11,R[87],E,R[88],0,[[["r"]],["r"]]],[11,R[89],E,R[90],0,[[],["r"]]],[11,R[91],E,R[92],0,[[["f"]],["r"]]],[11,R[93],E,R[6],0,[[]]],[11,R[94],E,R[6],0,[[]]],[11,R[33],E,R[95],0,[[],[T]]],[11,"map",E,R[96],0,[[["f"]],[R[3]]]],[14,"try_left",E,"Macro for unwrapping the left side of an `Either`, which…",N,N],[14,"try_right",E,"Dual to `try_left!`, see its documentation for more…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,"into",E,E,0,[[],[U]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[8],E,E,0,[[],["i"]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,R[60],E,E,0,[[["self"]]]],[11,"from",E,E,0,[[[R[7]]],["self"]]],[11,"eq",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],[R[3]]],[R[9]]]],[11,R[59],E,E,0,[[["self"],[R[3]]],[[R[9]],[R[2],[R[9]]]]]],[11,"lt",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"deref",E,E,0,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,R[23],E,E,0,[[["self"]],["target"]]],[11,R[23],E,E,0,[[["self"]],["str"]]],[11,R[23],E,E,0,[[["self"]]]],[11,R[24],E,E,0,[[["self"]],["str"]]],[11,R[24],E,E,0,[[["self"]],["target"]]],[11,R[24],E,E,0,[[["self"]]]],[11,"into",E,E,0,[[],[R[7]]]],[11,"next",E,E,0,[[["self"]],[R[2]]]],[11,R[58],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],[R[0]]]],[11,"last",E,E,0,[[],[R[2]]]],[11,"nth",E,E,0,[[["self"],[R[0]]],[R[2]]]],[11,R[64],E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,R[57],E,E,0,[[["self"]],[R[2]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,"clone",E,E,0,[[["self"]],[R[3]]]]],"p":[[4,"Either"]]};
searchIndex["itertools"]={"doc":"Extra iterator adaptors, functions and macros.","i":[[4,"Either",R[21],R[11],N,N],[13,"Left",E,R[12],0,N],[13,"Right",E,R[13],0,N],[4,"Diff",E,"A type returned by the `diff_with` function.",N,N],[13,"FirstMismatch",E,"The index of the first non-matching element along with…",1,N],[13,"Shorter",E,"The total number of elements that were in `J` along with…",1,N],[13,"Longer",E,"The total number of elements that were in `I` along with…",1,N],[4,R[97],E,"`MinMaxResult` is an enum returned by `minmax`. See…",N,N],[13,"NoElements",E,"Empty iterator",2,N],[13,"OneElement",E,"Iterator with one element, so the minimum and maximum are…",2,N],[13,"MinMax",E,"More than one element in the iterator, the first element…",2,N],[4,R[98],E,"A value yielded by `WithPosition`. Indicates the position…",N,N],[13,"First",E,"This is the first element.",3,N],[13,"Middle",E,"This is neither the first nor the last element.",3,N],[13,"Last",E,"This is the last element.",3,N],[13,"Only",E,"This is the only element.",3,N],[4,R[99],E,"Value that either holds a single A or B, or both.",N,N],[13,"Both",E,"Both values are present.",4,N],[13,"Left",E,"Only the left value of type `A` is present.",4,N],[13,"Right",E,"Only the right value of type `B` is present.",4,N],[4,R[100],E,"An enum used for controlling the execution of…",N,N],[13,"Continue",E,R[245],5,N],[13,"Done",E,R[246],5,N],[5,"concat",E,R[46],N,[[["i"]]]],[5,"cons_tuples",E,"Create an iterator that maps for example iterators of…",N,[[["i"]],["constuples"]]],[5,"diff_with",E,"Compares every element yielded by both `i` and `j` with…",N,[[["j"],["i"],["f"]],[[R[2],["diff"]],["diff"]]]],[5,"process_results",E,"“Lift” a function of the values of an iterator so that it…",N,[[["i"],["f"]],[R[7]]]],[5,"repeat_n",E,"Create an iterator that produces `n` repetitions of…",N,[[["a"],[R[0]]],["repeatn"]]],[5,"repeat_call",E,"An iterator source that produces elements indefinitely by…",N,[[["f"]],["repeatcall"]]],[5,"unfold",E,"Creates a new unfold source with the specified closure as…",N,[[["f"],["st"]],["unfold"]]],[5,R[68],E,"Creates a new iterator that infinitely applies function to…",N,[[["f"],["st"]],[R[68]]]],[5,"multizip",E,"An iterator that generalizes .zip() and allows running…",N,[[[U]],["zip"]]],[5,R[14],E,"Create an iterator that interleaves elements in `i` and `j`.",N,[[["j"],["i"]],[R[14]]]],[5,"merge",E,"Create an iterator that merges elements in `i` and `j`.",N,[[["j"],["i"]],["merge"]]],[5,R[20],E,"Create an iterator where you can put back a single item",N,[[["i"]],["putback"]]],[5,"zip_eq",E,R[16],N,[[["j"],["i"]],["zipeq"]]],[5,R[40],E,"Return an iterator adaptor that merge-joins items from the…",N,[[["j"],["i"],["f"]],[R[41]]]],[5,R[15],E,"Iterate `iterable` with a running index.",N,[[["i"]],[R[15]]]],[5,"rev",E,"Iterate `iterable` in reverse.",N,[[["i"]],["rev"]]],[5,"zip",E,R[16],N,[[["j"],["i"]],["zip"]]],[5,"chain",E,"Create an iterator that first iterates `i` and then `j`.",N,[[["j"],["i"]],["chain"]]],[5,"cloned",E,"Create an iterator that clones each element from &T to T",N,[[["i"]],["cloned"]]],[5,"fold",E,"Perform a fold operation over the iterable.",N,[[["i"],["b"],["f"]],["b"]]],[5,"all",E,"Test whether the predicate holds for all elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"any",E,"Test whether the predicate holds for any elements in the…",N,[[["i"],["f"]],["bool"]]],[5,"max",E,"Return the maximum value of the iterable.",N,[[["i"]],[R[2]]]],[5,"min",E,"Return the minimum value of the iterable.",N,[[["i"]],[R[2]]]],[5,"equal",E,"Return `true` if both iterables produce equal sequences…",N,[[["j"],["i"]],["bool"]]],[5,"assert_equal",E,"Assert that two iterables produce equal sequences, with…",N,[[["j"],["i"]]]],[5,"partition",E,"Partition a sequence using predicate `pred` so that…",N,[[["i"],["f"]],[R[0]]]],[0,"structs",E,"The concrete iterator types.",N,N],[3,"DedupBy",R[32],"An iterator adaptor that removes repeated duplicates,…",N,N],[3,R[103],E,"An iterator adaptor that alternates elements from two…",N,N],[3,R[104],E,"An iterator adaptor that alternates elements from the two…",N,N],[3,"Product",E,"An iterator adaptor that iterates over the cartesian…",N,N],[3,"PutBack",E,"An iterator adaptor that allows putting back a single item…",N,N],[3,"Batching",E,R[37],N,N],[3,"MapInto",E,"An iterator adapter to apply `Into` conversion to each…",N,N],[3,R[105],E,"An iterator adapter to apply a transformation within a…",N,N],[3,"MergeBy",E,R[19],N,N],[3,R[106],E,"An iterator adaptor that borrows from a `Clone`-able…",N,N],[3,R[107],E,"An iterator adaptor that filters `Option<A>` iterator…",N,N],[3,"Coalesce",E,"An iterator adaptor that may join together adjacent…",N,N],[3,R[108],E,"An iterator to iterate through all combinations in a…",N,N],[3,R[109],E,"An iterator adapter to get the positions of each element…",N,N],[3,"Update",E,"An iterator adapter to apply a mutating function to each…",N,N],[3,"Step",E,"An iterator adaptor that steps a number elements in the…",N,N],[3,R[110],E,"An iterator that maps an iterator of tuples like `((A, B),…",N,N],[3,R[111],E,"Iterator returned for the error case of…",N,N],[3,"Format",E,R[17],N,N],[3,R[112],E,R[17],N,N],[3,R[113],E,R[34],N,N],[3,R[114],E,"An iterator adaptor that merge-joins items from the two…",N,N],[3,"PadUsing",E,"An iterator adaptor that pads a sequence to a minimum…",N,N],[3,R[115],E,"An iterator adaptor that takes items while a closure…",N,N],[3,R[116],E,"An iterator that produces only the `T` values as long as…",N,N],[3,"RepeatN",E,"An iterator that produces n repetitions of an element.",N,N],[3,R[117],E,"See `repeat_call` for more information.",N,N],[3,"Unfold",E,"See `unfold` for more information.",N,N],[12,"state",E,"Internal state that will be passed to the closure on the…",6,N],[3,"Iterate",E,"An iterator that infinitely applies function to value and…",N,N],[3,R[118],E,"An iterator over a incomplete tuple.",N,N],[3,R[119],E,"An iterator over all contiguous windows that produces…",N,N],[3,"Tuples",E,"An iterator that groups the items in tuples of a specific…",N,N],[3,R[120],E,"An iterator adaptor that wraps each element in an…",N,N],[3,"ZipEq",E,R[18],N,N],[3,R[121],E,R[18],N,N],[3,"Zip",E,"See `multizip` for more information.",N,N],[6,"Dedup",E,"An iterator adaptor that removes repeated duplicates.",N,N],[6,"Merge",E,R[19],N,N],[11,"with_value",E,"put back value `value` (builder method)",7,[[],["self"]]],[11,"into_parts",E,"Split the `PutBack` into its parts.",7,[[]]],[11,R[20],E,"Put back a single value to the front of the iterator.",7,[[["self"]]]],[11,"has_left",R[21],"If `Left`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,"has_right",E,"If `Right`, or `Both`, return true, otherwise, return false.",4,[[["self"]],["bool"]]],[11,R[70],E,"If Left, return true otherwise, return false. Exclusive…",4,[[["self"]],["bool"]]],[11,R[22],E,"If Right, return true otherwise, return false. Exclusive…",4,[[["self"]],["bool"]]],[11,"is_both",E,"If Right, return true otherwise, return false. Equivalent…",4,[[["self"]],["bool"]]],[11,"left",E,"If `Left`, or `Both`, return `Some` with the left value,…",4,[[],[R[2]]]],[11,"right",E,"If `Right`, or `Both`, return `Some` with the right value,…",4,[[],[R[2]]]],[11,"both",E,"If Both, return `Some` tuple containing left and right.",4,[[],[R[2]]]],[11,R[23],E,"Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A,…",4,[[["self"]],[[R[25]],["b"],["a"]]]],[11,R[24],E,"Converts from `&mut EitherOrBoth<A, B>` to…",4,[[["self"]],[[R[25]],["a"],["b"]]]],[11,"flip",E,"Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.",4,[[],[R[25]]]],[11,R[26],E,R[31],4,[[["f"]],[R[25]]]],[11,R[27],E,R[29],4,[[["f"]],[R[25]]]],[11,"map_any",E,"Apply the functions `f` and `g` on the value `a` and `b`…",4,[[["f"],["g"]],[R[25]]]],[11,R[28],E,R[29],4,[[["f"]],[R[25]]]],[11,R[30],E,R[31],4,[[["f"]],[R[25]]]],[11,"reduce",E,"Return either value of left, right, or the product of `f`…",4,[[["f"]],[T]]],[11,"into_option",E,"`into_option` creates an `Option` of type `(T, T)`. The…",2,[[],[R[2]]]],[11,"into_buffer",R[32],"Return a buffer with the produced items that was not…",8,[[],["tuplebuffer"]]],[11,R[33],R[21],"Return the inner value.",3,[[],[T]]],[8,R[101],E,"An iterator that allows peeking at an element before…",N,N],[10,R[61],E,"Pass a reference to the next iterator element to the…",9,[[["self"],["f"]],[R[2]]]],[8,R[102],E,"An [`Iterator`] blanket implementation that provides extra…",N,N],[11,R[14],E,"Alternate elements from two iterators until both have run…",10,[[["j"]],[R[14]]]],[11,"interleave_shortest",E,"Alternate elements from two iterators until at least one…",10,[[["j"]],[R[65]]]],[11,R[35],E,R[34],10,[[],[R[35]]]],[11,"zip_longest",E,R[36],10,[[["j"]],[R[69]]]],[11,"zip_eq",E,R[36],10,[[["j"]],["zipeq"]]],[11,R[38],E,R[37],10,[[["f"]],[R[38]]]],[11,"tuple_windows",E,"Return an iterator over all contiguous windows producing…",10,[[],["tuplewindows"]]],[11,"tuples",E,"Return an iterator that groups the items in tuples of a…",10,[[],["tuples"]]],[11,"step",E,"Return an iterator adaptor that steps `n` elements in the…",10,[[[R[0]]],["step"]]],[11,"map_into",E,"Convert each item of the iterator using the `Into` trait.",10,[[],["mapinto"]]],[11,"map_results",E,"Return an iterator adaptor that applies the provided…",10,[[["f"]],["mapresults"]]],[11,"merge",E,R[39],10,[[["j"]],["merge"]]],[11,"merge_by",E,R[39],10,[[["j"],["f"]],["mergeby"]]],[11,R[40],E,"Create an iterator that merges items from both this and…",10,[[["j"],["f"]],[R[41]]]],[11,"cartesian_product",E,R[44],10,[[["j"]],["product"]]],[11,R[42],E,"Return an iterator adaptor that uses the passed-in closure…",10,[[["f"]],[R[42]]]],[11,"dedup",E,R[43],10,[[],["dedup"]]],[11,"dedup_by",E,R[43],10,[[["cmp"]],["dedupby"]]],[11,"peeking_take_while",E,"Return an iterator adaptor that borrows from this iterator…",10,[[["self"],["f"]],["peekingtakewhile"]]],[11,"take_while_ref",E,"Return an iterator adaptor that borrows from a…",10,[[["self"],["f"]],["takewhileref"]]],[11,"while_some",E,"Return an iterator adaptor that filters `Option<A>`…",10,[[],[R[66]]]],[11,"tuple_combinations",E,R[44],10,[[],["tuplecombinations"]]],[11,"pad_using",E,"Return an iterator adaptor that pads the sequence to a…",10,[[[R[0]],["f"]],[R[67]]]],[11,"with_position",E,"Return an iterator adaptor that wraps each element in a…",10,[[],["withposition"]]],[11,R[45],E,"Return an iterator adaptor that yields the indices of all…",10,[[["p"]],[R[45]]]],[11,"update",E,"Return an iterator adaptor that applies a mutating…",10,[[["f"]],["update"]]],[11,"next_tuple",E,"Advances the iterator and returns the next items grouped…",10,[[["self"]],[R[2]]]],[11,"collect_tuple",E,"Collects all items from the iterator into a tuple of a…",10,[[],[R[2]]]],[11,"find_position",E,"Find the position and value of the first element…",10,[[["self"],["p"]],[R[2]]]],[11,"all_equal",E,"Check whether all elements compare equal.",10,[[["self"]],["bool"]]],[11,"dropping",E,"Consume the first `n` elements from the iterator eagerly,…",10,[[[R[0]]],["self"]]],[11,"dropping_back",E,"Consume the last `n` elements from the iterator eagerly,…",10,[[[R[0]]],["self"]]],[11,"foreach",E,"Run the closure `f` eagerly on each element of the iterator.",10,[[["f"]]]],[11,"concat",E,R[46],10,[[]]],[11,"set_from",E,"Assign to each reference in `self` from the `from`…",10,[[["self"],["j"]],[R[0]]]],[11,"format",E,R[47],10,[[["str"]],["format"]]],[11,"format_with",E,R[47],10,[[["str"],["f"]],["formatwith"]]],[11,"fold_results",E,"Fold `Result` values from an iterator.",10,[[["self"],["b"],["f"]],[R[7]]]],[11,"fold_options",E,"Fold `Option` values from an iterator.",10,[[["self"],["b"],["f"]],[R[2]]]],[11,"fold1",E,"Accumulator of the elements in the iterator.",10,[[["f"]],[R[2]]]],[11,"tree_fold1",E,"Accumulate the elements in the iterator in a tree-like…",10,[[["f"]],[R[2]]]],[11,R[262],E,"An iterator method that applies a function, producing a…",10,[[["self"],["b"],["f"]],[R[63]]]],[11,"sum1",E,"Iterate over the entire iterator and add all the elements.",10,[[],[R[2]]]],[11,"product1",E,"Iterate over the entire iterator and multiply all the…",10,[[],[R[2]]]],[11,"partition_map",E,"Collect all iterator elements into one of two partitions.…",10,[[["f"]]]],[11,"minmax",E,"Return the minimum and maximum elements in the iterator.",10,[[],[R[48]]]],[11,"minmax_by_key",E,R[49],10,[[["f"]],[R[48]]]],[11,"minmax_by",E,R[49],10,[[["f"]],[R[48]]]],[11,"exactly_one",E,"If the iterator yields exactly one element, that element…",10,[[],[[R[7],[R[50]]],[R[50]]]]],[11,R[33],E,"Return the value in the continue or done.",5,[[],[T]]],[11,"is_done",E,"Return true if `self` is `Done`, false if it is `Continue`.",5,[[["self"]],["bool"]]],[14,"iproduct",E,"Create an iterator over the “cartesian product” of…",N,N],[14,"izip",E,"Create an iterator running multiple iterators in lockstep.",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,"into",E,E,0,[[],[U]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[8],E,E,0,[[],["i"]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[51],E,E,1,[[[U]],[R[7]]]],[11,"into",E,E,1,[[],[U]]],[11,R[52],E,E,1,[[],[R[7]]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[53],E,E,1,[[["self"]],[T]]],[11,R[54],E,E,1,[[["self"]],[R[56]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[51],E,E,2,[[[U]],[R[7]]]],[11,"into",E,E,2,[[],[U]]],[11,R[52],E,E,2,[[],[R[7]]]],[11,R[55],E,E,2,[[["self"]],[T]]],[11,R[53],E,E,2,[[["self"]],[T]]],[11,R[54],E,E,2,[[["self"]],[R[56]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[51],E,E,3,[[[U]],[R[7]]]],[11,"into",E,E,3,[[],[U]]],[11,R[52],E,E,3,[[],[R[7]]]],[11,R[55],E,E,3,[[["self"]],[T]]],[11,R[53],E,E,3,[[["self"]],[T]]],[11,R[54],E,E,3,[[["self"]],[R[56]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[51],E,E,4,[[[U]],[R[7]]]],[11,"into",E,E,4,[[],[U]]],[11,R[52],E,E,4,[[],[R[7]]]],[11,R[55],E,E,4,[[["self"]],[T]]],[11,R[53],E,E,4,[[["self"]],[T]]],[11,R[54],E,E,4,[[["self"]],[R[56]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[51],E,E,5,[[[U]],[R[7]]]],[11,"into",E,E,5,[[],[U]]],[11,R[52],E,E,5,[[],[R[7]]]],[11,R[55],E,E,5,[[["self"]],[T]]],[11,R[53],E,E,5,[[["self"]],[T]]],[11,R[54],E,E,5,[[["self"]],[R[56]]]],[11,"from",R[32],E,11,[[[T]],[T]]],[11,R[51],E,E,11,[[[U]],[R[7]]]],[11,"into",E,E,11,[[],[U]]],[11,R[52],E,E,11,[[],[R[7]]]],[11,R[8],E,E,11,[[],["i"]]],[11,R[55],E,E,11,[[["self"]],[T]]],[11,R[53],E,E,11,[[["self"]],[T]]],[11,R[54],E,E,11,[[["self"]],[R[56]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[51],E,E,12,[[[U]],[R[7]]]],[11,"into",E,E,12,[[],[U]]],[11,R[52],E,E,12,[[],[R[7]]]],[11,R[8],E,E,12,[[],["i"]]],[11,R[55],E,E,12,[[["self"]],[T]]],[11,R[53],E,E,12,[[["self"]],[T]]],[11,R[54],E,E,12,[[["self"]],[R[56]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[51],E,E,13,[[[U]],[R[7]]]],[11,"into",E,E,13,[[],[U]]],[11,R[52],E,E,13,[[],[R[7]]]],[11,R[8],E,E,13,[[],["i"]]],[11,R[55],E,E,13,[[["self"]],[T]]],[11,R[53],E,E,13,[[["self"]],[T]]],[11,R[54],E,E,13,[[["self"]],[R[56]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[51],E,E,14,[[[U]],[R[7]]]],[11,"into",E,E,14,[[],[U]]],[11,R[52],E,E,14,[[],[R[7]]]],[11,R[8],E,E,14,[[],["i"]]],[11,R[55],E,E,14,[[["self"]],[T]]],[11,R[53],E,E,14,[[["self"]],[T]]],[11,R[54],E,E,14,[[["self"]],[R[56]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[51],E,E,7,[[[U]],[R[7]]]],[11,"into",E,E,7,[[],[U]]],[11,R[52],E,E,7,[[],[R[7]]]],[11,R[8],E,E,7,[[],["i"]]],[11,R[55],E,E,7,[[["self"]],[T]]],[11,R[53],E,E,7,[[["self"]],[T]]],[11,R[54],E,E,7,[[["self"]],[R[56]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[51],E,E,15,[[[U]],[R[7]]]],[11,"into",E,E,15,[[],[U]]],[11,R[52],E,E,15,[[],[R[7]]]],[11,R[8],E,E,15,[[],["i"]]],[11,R[55],E,E,15,[[["self"]],[T]]],[11,R[53],E,E,15,[[["self"]],[T]]],[11,R[54],E,E,15,[[["self"]],[R[56]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[51],E,E,16,[[[U]],[R[7]]]],[11,"into",E,E,16,[[],[U]]],[11,R[52],E,E,16,[[],[R[7]]]],[11,R[8],E,E,16,[[],["i"]]],[11,R[55],E,E,16,[[["self"]],[T]]],[11,R[53],E,E,16,[[["self"]],[T]]],[11,R[54],E,E,16,[[["self"]],[R[56]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[51],E,E,17,[[[U]],[R[7]]]],[11,"into",E,E,17,[[],[U]]],[11,R[52],E,E,17,[[],[R[7]]]],[11,R[8],E,E,17,[[],["i"]]],[11,R[55],E,E,17,[[["self"]],[T]]],[11,R[53],E,E,17,[[["self"]],[T]]],[11,R[54],E,E,17,[[["self"]],[R[56]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[51],E,E,18,[[[U]],[R[7]]]],[11,"into",E,E,18,[[],[U]]],[11,R[52],E,E,18,[[],[R[7]]]],[11,R[8],E,E,18,[[],["i"]]],[11,R[55],E,E,18,[[["self"]],[T]]],[11,R[53],E,E,18,[[["self"]],[T]]],[11,R[54],E,E,18,[[["self"]],[R[56]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[51],E,E,19,[[[U]],[R[7]]]],[11,"into",E,E,19,[[],[U]]],[11,R[52],E,E,19,[[],[R[7]]]],[11,R[8],E,E,19,[[],["i"]]],[11,R[55],E,E,19,[[["self"]],[T]]],[11,R[53],E,E,19,[[["self"]],[T]]],[11,R[54],E,E,19,[[["self"]],[R[56]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[51],E,E,20,[[[U]],[R[7]]]],[11,"into",E,E,20,[[],[U]]],[11,R[52],E,E,20,[[],[R[7]]]],[11,R[8],E,E,20,[[],["i"]]],[11,R[55],E,E,20,[[["self"]],[T]]],[11,R[53],E,E,20,[[["self"]],[T]]],[11,R[54],E,E,20,[[["self"]],[R[56]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[51],E,E,21,[[[U]],[R[7]]]],[11,"into",E,E,21,[[],[U]]],[11,R[52],E,E,21,[[],[R[7]]]],[11,R[8],E,E,21,[[],["i"]]],[11,R[55],E,E,21,[[["self"]],[T]]],[11,R[53],E,E,21,[[["self"]],[T]]],[11,R[54],E,E,21,[[["self"]],[R[56]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[51],E,E,22,[[[U]],[R[7]]]],[11,"into",E,E,22,[[],[U]]],[11,R[52],E,E,22,[[],[R[7]]]],[11,R[8],E,E,22,[[],["i"]]],[11,R[55],E,E,22,[[["self"]],[T]]],[11,R[53],E,E,22,[[["self"]],[T]]],[11,R[54],E,E,22,[[["self"]],[R[56]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[51],E,E,23,[[[U]],[R[7]]]],[11,"into",E,E,23,[[],[U]]],[11,R[52],E,E,23,[[],[R[7]]]],[11,R[8],E,E,23,[[],["i"]]],[11,R[55],E,E,23,[[["self"]],[T]]],[11,R[53],E,E,23,[[["self"]],[T]]],[11,R[54],E,E,23,[[["self"]],[R[56]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[51],E,E,24,[[[U]],[R[7]]]],[11,"into",E,E,24,[[],[U]]],[11,R[52],E,E,24,[[],[R[7]]]],[11,R[8],E,E,24,[[],["i"]]],[11,R[55],E,E,24,[[["self"]],[T]]],[11,R[53],E,E,24,[[["self"]],[T]]],[11,R[54],E,E,24,[[["self"]],[R[56]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[51],E,E,25,[[[U]],[R[7]]]],[11,"into",E,E,25,[[],[U]]],[11,R[52],E,E,25,[[],[R[7]]]],[11,R[8],E,E,25,[[],["i"]]],[11,R[55],E,E,25,[[["self"]],[T]]],[11,R[53],E,E,25,[[["self"]],[T]]],[11,R[54],E,E,25,[[["self"]],[R[56]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[51],E,E,26,[[[U]],[R[7]]]],[11,"into",E,E,26,[[],[U]]],[11,R[52],E,E,26,[[],[R[7]]]],[11,R[8],E,E,26,[[],["i"]]],[11,R[55],E,E,26,[[["self"]],[T]]],[11,R[53],E,E,26,[[["self"]],[T]]],[11,R[54],E,E,26,[[["self"]],[R[56]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[51],E,E,27,[[[U]],[R[7]]]],[11,"into",E,E,27,[[],[U]]],[11,R[52],E,E,27,[[],[R[7]]]],[11,R[8],E,E,27,[[],["i"]]],[11,R[55],E,E,27,[[["self"]],[T]]],[11,R[53],E,E,27,[[["self"]],[T]]],[11,R[54],E,E,27,[[["self"]],[R[56]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[51],E,E,28,[[[U]],[R[7]]]],[11,"into",E,E,28,[[],[U]]],[11,R[52],E,E,28,[[],[R[7]]]],[11,R[55],E,E,28,[[["self"]],[T]]],[11,R[53],E,E,28,[[["self"]],[T]]],[11,R[54],E,E,28,[[["self"]],[R[56]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[51],E,E,29,[[[U]],[R[7]]]],[11,"into",E,E,29,[[],[U]]],[11,R[52],E,E,29,[[],[R[7]]]],[11,R[55],E,E,29,[[["self"]],[T]]],[11,R[53],E,E,29,[[["self"]],[T]]],[11,R[54],E,E,29,[[["self"]],[R[56]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[51],E,E,30,[[[U]],[R[7]]]],[11,"into",E,E,30,[[],[U]]],[11,R[52],E,E,30,[[],[R[7]]]],[11,R[8],E,E,30,[[],["i"]]],[11,R[55],E,E,30,[[["self"]],[T]]],[11,R[53],E,E,30,[[["self"]],[T]]],[11,R[54],E,E,30,[[["self"]],[R[56]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[51],E,E,31,[[[U]],[R[7]]]],[11,"into",E,E,31,[[],[U]]],[11,R[52],E,E,31,[[],[R[7]]]],[11,R[8],E,E,31,[[],["i"]]],[11,R[55],E,E,31,[[["self"]],[T]]],[11,R[53],E,E,31,[[["self"]],[T]]],[11,R[54],E,E,31,[[["self"]],[R[56]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[51],E,E,32,[[[U]],[R[7]]]],[11,"into",E,E,32,[[],[U]]],[11,R[52],E,E,32,[[],[R[7]]]],[11,R[8],E,E,32,[[],["i"]]],[11,R[55],E,E,32,[[["self"]],[T]]],[11,R[53],E,E,32,[[["self"]],[T]]],[11,R[54],E,E,32,[[["self"]],[R[56]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[51],E,E,33,[[[U]],[R[7]]]],[11,"into",E,E,33,[[],[U]]],[11,R[52],E,E,33,[[],[R[7]]]],[11,R[8],E,E,33,[[],["i"]]],[11,R[55],E,E,33,[[["self"]],[T]]],[11,R[53],E,E,33,[[["self"]],[T]]],[11,R[54],E,E,33,[[["self"]],[R[56]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[51],E,E,34,[[[U]],[R[7]]]],[11,"into",E,E,34,[[],[U]]],[11,R[52],E,E,34,[[],[R[7]]]],[11,R[8],E,E,34,[[],["i"]]],[11,R[55],E,E,34,[[["self"]],[T]]],[11,R[53],E,E,34,[[["self"]],[T]]],[11,R[54],E,E,34,[[["self"]],[R[56]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[51],E,E,35,[[[U]],[R[7]]]],[11,"into",E,E,35,[[],[U]]],[11,R[52],E,E,35,[[],[R[7]]]],[11,R[8],E,E,35,[[],["i"]]],[11,R[55],E,E,35,[[["self"]],[T]]],[11,R[53],E,E,35,[[["self"]],[T]]],[11,R[54],E,E,35,[[["self"]],[R[56]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[51],E,E,36,[[[U]],[R[7]]]],[11,"into",E,E,36,[[],[U]]],[11,R[52],E,E,36,[[],[R[7]]]],[11,R[8],E,E,36,[[],["i"]]],[11,R[55],E,E,36,[[["self"]],[T]]],[11,R[53],E,E,36,[[["self"]],[T]]],[11,R[54],E,E,36,[[["self"]],[R[56]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[51],E,E,6,[[[U]],[R[7]]]],[11,"into",E,E,6,[[],[U]]],[11,R[52],E,E,6,[[],[R[7]]]],[11,R[8],E,E,6,[[],["i"]]],[11,R[55],E,E,6,[[["self"]],[T]]],[11,R[53],E,E,6,[[["self"]],[T]]],[11,R[54],E,E,6,[[["self"]],[R[56]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[51],E,E,37,[[[U]],[R[7]]]],[11,"into",E,E,37,[[],[U]]],[11,R[52],E,E,37,[[],[R[7]]]],[11,R[8],E,E,37,[[],["i"]]],[11,R[55],E,E,37,[[["self"]],[T]]],[11,R[53],E,E,37,[[["self"]],[T]]],[11,R[54],E,E,37,[[["self"]],[R[56]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[51],E,E,38,[[[U]],[R[7]]]],[11,"into",E,E,38,[[],[U]]],[11,R[52],E,E,38,[[],[R[7]]]],[11,R[8],E,E,38,[[],["i"]]],[11,R[55],E,E,38,[[["self"]],[T]]],[11,R[53],E,E,38,[[["self"]],[T]]],[11,R[54],E,E,38,[[["self"]],[R[56]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[51],E,E,39,[[[U]],[R[7]]]],[11,"into",E,E,39,[[],[U]]],[11,R[52],E,E,39,[[],[R[7]]]],[11,R[8],E,E,39,[[],["i"]]],[11,R[55],E,E,39,[[["self"]],[T]]],[11,R[53],E,E,39,[[["self"]],[T]]],[11,R[54],E,E,39,[[["self"]],[R[56]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[51],E,E,8,[[[U]],[R[7]]]],[11,"into",E,E,8,[[],[U]]],[11,R[52],E,E,8,[[],[R[7]]]],[11,R[8],E,E,8,[[],["i"]]],[11,R[55],E,E,8,[[["self"]],[T]]],[11,R[53],E,E,8,[[["self"]],[T]]],[11,R[54],E,E,8,[[["self"]],[R[56]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[51],E,E,40,[[[U]],[R[7]]]],[11,"into",E,E,40,[[],[U]]],[11,R[52],E,E,40,[[],[R[7]]]],[11,R[8],E,E,40,[[],["i"]]],[11,R[55],E,E,40,[[["self"]],[T]]],[11,R[53],E,E,40,[[["self"]],[T]]],[11,R[54],E,E,40,[[["self"]],[R[56]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[51],E,E,41,[[[U]],[R[7]]]],[11,"into",E,E,41,[[],[U]]],[11,R[52],E,E,41,[[],[R[7]]]],[11,R[8],E,E,41,[[],["i"]]],[11,R[55],E,E,41,[[["self"]],[T]]],[11,R[53],E,E,41,[[["self"]],[T]]],[11,R[54],E,E,41,[[["self"]],[R[56]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[51],E,E,42,[[[U]],[R[7]]]],[11,"into",E,E,42,[[],[U]]],[11,R[52],E,E,42,[[],[R[7]]]],[11,R[8],E,E,42,[[],["i"]]],[11,R[55],E,E,42,[[["self"]],[T]]],[11,R[53],E,E,42,[[["self"]],[T]]],[11,R[54],E,E,42,[[["self"]],[R[56]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[51],E,E,43,[[[U]],[R[7]]]],[11,"into",E,E,43,[[],[U]]],[11,R[52],E,E,43,[[],[R[7]]]],[11,R[8],E,E,43,[[],["i"]]],[11,R[55],E,E,43,[[["self"]],[T]]],[11,R[53],E,E,43,[[["self"]],[T]]],[11,R[54],E,E,43,[[["self"]],[R[56]]]],[11,"into",R[21],E,0,[[],[R[7]]]],[11,"eq",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[[R[7],["error"]],["error"]]]],[11,R[57],E,E,0,[[["self"]],[R[2]]]],[11,R[23],E,E,0,[[["self"]]]],[11,R[23],E,E,0,[[["self"]],["target"]]],[11,R[23],E,E,0,[[["self"]],["str"]]],[11,"next",E,E,0,[[["self"]],[R[2]]]],[11,R[58],E,E,0,[[["self"]]]],[11,"fold",E,E,0,[[["acc"],["g"]],["acc"]]],[11,"count",E,E,0,[[],[R[0]]]],[11,"last",E,E,0,[[],[R[2]]]],[11,"nth",E,E,0,[[["self"],[R[0]]],[R[2]]]],[11,R[64],E,E,0,[[],["b"]]],[11,"all",E,E,0,[[["self"],["f"]],["bool"]]],[11,R[59],E,E,0,[[["self"],[R[3]]],[[R[9]],[R[2],[R[9]]]]]],[11,"lt",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[3]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[[R[7],["error"]],["error"]]]],[11,R[24],E,E,0,[[["self"]],["str"]]],[11,R[24],E,E,0,[[["self"]]]],[11,R[24],E,E,0,[[["self"]],["target"]]],[11,"deref",E,E,0,[[["self"]]]],[11,"from",E,E,0,[[[R[7]]],[R[3]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,R[60],E,E,0,[[["self"]]]],[11,"cmp",E,E,0,[[["self"],[R[3]]],[R[9]]]],[11,"clone",E,E,0,[[["self"]],[R[3]]]],[11,"extend",E,E,0,[[["self"],[T]]]],[11,R[61],R[32],E,7,[[["self"],["f"]],[R[2]]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"from",E,E,43,[[],["self"]]],[11,"eq",R[21],E,4,[[["self"],[R[25]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[25]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[48]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[48]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[62]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[62]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[63]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[63]]],["bool"]]],[11,"fmt",R[32],E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,12,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,13,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,7,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,14,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,25,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,18,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,21,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,11,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,19,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,20,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,22,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[21],E,4,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[32],E,26,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,27,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,30,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,31,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[21],E,2,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[32],E,34,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,35,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,36,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,6,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,37,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,38,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,39,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[21],E,3,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[32],E,41,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,42,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,43,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[21],E,5,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[32],E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,29,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"into",R[21],E,4,[[],[[R[2],[R[3]]],[R[3]]]]],[11,"fmt",R[32],E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"next",E,E,12,[[["self"]],[R[2]]]],[11,R[58],E,E,12,[[["self"]]]],[11,"next",E,E,13,[[["self"]],[R[2]]]],[11,R[58],E,E,13,[[["self"]]]],[11,"next",E,E,7,[[["self"]],[R[2]]]],[11,R[58],E,E,7,[[["self"]]]],[11,"all",E,E,7,[[["self"],["g"]],["bool"]]],[11,"fold",E,E,7,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,14,[[["self"]],[R[2]]]],[11,R[58],E,E,14,[[["self"]]]],[11,"fold",E,E,14,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,15,[[["self"]],[R[2]]]],[11,R[58],E,E,15,[[["self"]]]],[11,"next",E,E,25,[[["self"]],[R[2]]]],[11,R[58],E,E,25,[[["self"]]]],[11,"next",E,E,18,[[["self"]],[R[2]]]],[11,R[58],E,E,18,[[["self"]]]],[11,"next",E,E,21,[[["self"]],[R[2]]]],[11,R[58],E,E,21,[[["self"]]]],[11,"next",E,E,11,[[["self"]],[R[2]]]],[11,R[58],E,E,11,[[["self"]]]],[11,"fold",E,E,11,[[["acc"],["g"]],["acc"]]],[11,"next",E,E,19,[[["self"]],[R[2]]]],[11,R[58],E,E,19,[[["self"]]]],[11,"next",E,E,20,[[["self"]],[R[2]]]],[11,R[58],E,E,20,[[["self"]]]],[11,"next",E,E,22,[[["self"]],[R[2]]]],[11,"next",E,E,16,[[["self"]],[R[2]]]],[11,R[58],E,E,16,[[["self"]]]],[11,"fold",E,E,16,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,17,[[["self"]],[R[2]]]],[11,R[58],E,E,17,[[["self"]]]],[11,"fold",E,E,17,[[["acc"],["fold"]],["acc"]]],[11,R[64],E,E,17,[[],["c"]]],[11,"next",E,E,23,[[["self"]],[R[2]]]],[11,R[58],E,E,23,[[["self"]]]],[11,"next",E,E,24,[[["self"]],[R[2]]]],[11,R[58],E,E,24,[[["self"]]]],[11,"fold",E,E,24,[[["acc"],["g"]],["acc"]]],[11,R[64],E,E,24,[[],["c"]]],[11,"next",E,E,26,[[["self"]],[R[2]]]],[11,R[58],E,E,26,[[["self"]]]],[11,"fold",E,E,26,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,26,[[["self"]],[R[2]]]],[11,R[58],E,E,26,[[["self"]]]],[11,"fold",E,E,26,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,26,[[["self"]],[R[2]]]],[11,R[58],E,E,26,[[["self"]]]],[11,"fold",E,E,26,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,26,[[["self"]],[R[2]]]],[11,R[58],E,E,26,[[["self"]]]],[11,"fold",E,E,26,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,26,[[["self"]],[R[2]]]],[11,R[58],E,E,26,[[["self"]]]],[11,"fold",E,E,26,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,26,[[["self"]],[R[2]]]],[11,R[58],E,E,26,[[["self"]]]],[11,"fold",E,E,26,[[["acc"],["fold"]],["acc"]]],[11,"next",E,E,27,[[["self"]],[R[2]]]],[11,R[58],E,E,27,[[["self"]]]],[11,"next",E,E,30,[[["self"]],[R[2]]]],[11,R[58],E,E,30,[[["self"]]]],[11,"fold",E,E,30,[[["b"],["f"]],["b"]]],[11,"next",E,E,31,[[["self"]],[R[2]]]],[11,R[58],E,E,31,[[["self"]]]],[11,"next",E,E,32,[[["self"]],[R[2]]]],[11,R[58],E,E,32,[[["self"]]]],[11,"next",E,E,33,[[["self"]],[R[2]]]],[11,R[58],E,E,33,[[["self"]]]],[11,"next",E,E,34,[[["self"]],[R[2]]]],[11,R[58],E,E,34,[[["self"]]]],[11,"next",E,E,35,[[["self"]],[R[2]]]],[11,R[58],E,E,35,[[["self"]]]],[11,"next",E,E,36,[[["self"]],[R[2]]]],[11,R[58],E,E,36,[[["self"]]]],[11,"next",E,E,6,[[["self"]],[R[2]]]],[11,R[58],E,E,6,[[["self"]]]],[11,"next",E,E,37,[[["self"]],[R[2]]]],[11,R[58],E,E,37,[[["self"]]]],[11,"next",E,E,38,[[["self"]],[R[2]]]],[11,R[58],E,E,38,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[R[2]]]],[11,"next",E,E,39,[[["self"]],[R[2]]]],[11,"next",E,E,40,[[["self"]],[R[2]]]],[11,R[58],E,E,40,[[["self"]]]],[11,"next",E,E,41,[[["self"]],[R[2]]]],[11,R[58],E,E,41,[[["self"]]]],[11,"next",E,E,42,[[["self"]],[R[2]]]],[11,R[58],E,E,42,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[R[2]]]],[11,R[58],E,E,43,[[["self"]]]],[11,R[57],E,E,16,[[["self"]],[R[2]]]],[11,R[57],E,E,23,[[["self"]],[R[2]]]],[11,R[57],E,E,24,[[["self"]],[R[2]]]],[11,R[57],E,E,26,[[["self"]],[R[2]]]],[11,R[57],E,E,26,[[["self"]],[R[2]]]],[11,R[57],E,E,26,[[["self"]],[R[2]]]],[11,R[57],E,E,26,[[["self"]],[R[2]]]],[11,R[57],E,E,26,[[["self"]],[R[2]]]],[11,R[57],E,E,26,[[["self"]],[R[2]]]],[11,R[57],E,E,32,[[["self"]],[R[2]]]],[11,R[57],E,E,35,[[["self"]],[R[2]]]],[11,R[57],E,E,42,[[["self"]],[R[2]]]],[11,"clone",E,E,12,[[["self"]],[R[14]]]],[11,"clone",E,E,13,[[["self"]],[R[65]]]],[11,"clone",E,E,7,[[["self"]],["putback"]]],[11,"clone",E,E,14,[[["self"]],["product"]]],[11,"clone",E,E,15,[[["self"]],[R[38]]]],[11,"clone",E,E,25,[[["self"]],["step"]]],[11,"clone",E,E,18,[[["self"]],["self"]]],[11,"clone",E,E,21,[[["self"]],["self"]]],[11,"clone",E,E,11,[[["self"]],["self"]]],[11,"clone",E,E,20,[[["self"]],[R[66]]]],[11,"clone",R[21],E,4,[[["self"]],[R[25]]]],[11,"clone",R[32],E,26,[[["self"]],["self"]]],[11,"clone",E,E,27,[[["self"]],[R[50]]]],[11,"clone",E,E,28,[[["self"]],["format"]]],[11,"clone",E,E,30,[[["self"]],[R[35]]]],[11,"clone",R[21],E,2,[[["self"]],[R[48]]]],[11,"clone",R[32],E,32,[[["self"]],[R[67]]]],[11,"clone",E,E,6,[[["self"]],["unfold"]]],[11,"clone",E,E,37,[[["self"]],[R[68]]]],[11,"clone",R[21],E,3,[[["self"]],[R[62]]]],[11,"clone",R[32],E,41,[[["self"]],["zipeq"]]],[11,"clone",E,E,42,[[["self"]],[R[69]]]],[11,"clone",E,E,43,[[["self"]],["zip"]]],[11,"clone",R[21],E,5,[[["self"]],[R[63]]]],[11,R[70],E,R[71],0,[[["self"]],["bool"]]],[11,R[22],E,R[72],0,[[["self"]],["bool"]]],[11,"left",E,R[73],0,[[],[R[2]]]],[11,"right",E,R[74],0,[[],[R[2]]]],[11,R[23],E,R[75],0,[[["self"]],[["l"],["r"],[R[3]]]]],[11,R[24],E,R[76],0,[[["self"]],[["r"],[R[3]],["l"]]]],[11,"flip",E,R[77],0,[[],[R[3]]]],[11,R[26],E,R[4],0,[[["f"]],[R[3]]]],[11,R[27],E,R[5],0,[[["f"]],[R[3]]]],[11,R[3],E,R[78],0,[[["f"],["g"]],[T]]],[11,R[79],E,R[80],0,[[["ctx"],["f"],["g"]],[T]]],[11,R[28],E,R[4],0,[[["f"]],[R[3]]]],[11,R[30],E,R[5],0,[[["f"]],[R[3]]]],[11,R[8],E,R[81],0,[[],[R[3]]]],[11,"left_or",E,R[82],0,[[["l"]],["l"]]],[11,R[83],E,R[84],0,[[],["l"]]],[11,R[85],E,R[86],0,[[["f"]],["l"]]],[11,R[87],E,R[88],0,[[["r"]],["r"]]],[11,R[89],E,R[90],0,[[],["r"]]],[11,R[91],E,R[92],0,[[["f"]],["r"]]],[11,R[93],E,R[6],0,[[]]],[11,R[94],E,R[6],0,[[]]],[11,R[33],E,R[95],0,[[],[T]]],[11,"map",E,R[96],0,[[["f"]],[R[3]]]]],"p":[[4,"Either"],[4,"Diff"],[4,R[97]],[4,R[98]],[4,R[99]],[4,R[100]],[3,"Unfold"],[3,"PutBack"],[3,"Tuples"],[8,R[101]],[8,R[102]],[3,"DedupBy"],[3,R[103]],[3,R[104]],[3,"Product"],[3,"Batching"],[3,"MapInto"],[3,R[105]],[3,"MergeBy"],[3,R[106]],[3,R[107]],[3,"Coalesce"],[3,R[108]],[3,R[109]],[3,"Update"],[3,"Step"],[3,R[110]],[3,R[111]],[3,"Format"],[3,R[112]],[3,R[113]],[3,R[114]],[3,"PadUsing"],[3,R[115]],[3,R[116]],[3,"RepeatN"],[3,R[117]],[3,"Iterate"],[3,R[118]],[3,R[119]],[3,R[120]],[3,"ZipEq"],[3,R[121]],[3,"Zip"]]};
searchIndex["main"]={"doc":E,"i":[],"p":[]};
searchIndex["matrixmultiply"]={"doc":"General matrix multiplication for f32, f64 matrices.…","i":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",N,[[["f32"],[R[0]],["isize"]]]],[5,"dgemm",E,"General matrix multiplication (f64)",N,[[[R[0]],["isize"],["f64"]]]]],"p":[]};
searchIndex["ndarray"]={"doc":"The `ndarray` crate provides an n-dimensional container…","i":[[3,"Dim",R[294],"Dimension description.",N,N],[3,"Axis",E,"An axis index.",N,N],[12,"0",E,E,0,N],[3,R[369],E,"Description of the axis, its length and its stride.",N,N],[12,"0",E,E,1,N],[12,"1",E,E,1,N],[12,"2",E,E,1,N],[3,R[386],E,"Dynamic dimension or index type.",N,N],[3,R[372],E,"An error related to array shape or layout.",N,N],[3,"Slice",E,"A slice (range with step size).",N,N],[12,"start",E,E,2,N],[12,"end",E,E,2,N],[12,"step",E,E,2,N],[3,R[376],E,"Represents all of the necessary information to perform a…",N,N],[3,"Zip",E,"Lock step function application across several arrays or…",N,N],[3,R[377],E,"An n-dimensional array.",N,N],[3,R[387],E,"Array's representation.",N,N],[3,R[388],E,"ArcArray's representation.",N,N],[3,R[389],E,"Array pointer’s representation.",N,N],[3,"ViewRepr",E,"Array view’s representation.",N,N],[3,"Shape",E,"A contiguous array shape of n dimensions.",N,N],[3,R[390],E,"An array shape of n dimensions in c-order, f-order or…",N,N],[4,R[370],E,"Error code for an error related to array shape or layout.",N,N],[13,"IncompatibleShape",E,"incompatible shape",3,N],[13,"IncompatibleLayout",E,"incompatible memory layout",3,N],[13,"RangeLimited",E,"the shape does not fit inside type limits",3,N],[13,"OutOfBounds",E,"out of bounds indexing",3,N],[13,"Unsupported",E,"aliasing array elements",3,N],[13,"Overflow",E,"overflow when computing offset, length, etc.",3,N],[4,R[371],E,"A slice (range with step) or an index.",N,N],[13,"Slice",E,"A range with step size. `end` is an exclusive index.…",4,N],[12,"start","ndarray::SliceOrIndex",E,4,N],[12,"end",E,E,4,N],[12,"step",E,E,4,N],[13,"Index",R[294],"A single index.",4,N],[4,R[100],E,"Value controlling the execution of `.fold_while` on `Zip`.",N,N],[13,"Continue",E,R[245],5,N],[13,"Done",E,R[246],5,N],[4,"CowRepr",E,"CowArray's representation.",N,N],[13,"View",E,"Borrowed data.",6,N],[13,"Owned",E,"Owned data.",6,N],[5,"Dim",E,"Create a new dimension value.",N,[[[T]]]],[5,"indices",E,"Create an iterable of the array shape `shape`.",N,[[["e"]],["indices"]]],[5,"indices_of",E,"Return an iterable of the indices of the passed-in array.",N,[[[R[271]]],["indices"]]],[5,"stack",E,R[304],N,[[["axis"]],[[R[7],["array",R[247]]],["array"],[R[247]]]]],[5,"Ix0",E,"Create a zero-dimensional index",N,[[],["ix0"]]],[5,"Ix1",E,"Create a one-dimensional index",N,[[["ix"]],["ix1"]]],[5,"Ix2",E,"Create a two-dimensional index",N,[[["ix"]],["ix2"]]],[5,"Ix3",E,"Create a three-dimensional index",N,[[["ix"]],["ix3"]]],[5,"Ix4",E,"Create a four-dimensional index",N,[[["ix"]],["ix4"]]],[5,"Ix5",E,"Create a five-dimensional index",N,[[["ix"]],["ix5"]]],[5,"Ix6",E,"Create a six-dimensional index",N,[[["ix"]],["ix6"]]],[5,"IxDyn",E,"Create a dynamic-dimensional index",N,[[],["ixdyn"]]],[5,"arr0",E,"Create a zero-dimensional array with the element `x`.",N,[[["a"]],["array0"]]],[5,"arr1",E,R[248],N,[[],[["array1"],["clone"]]]],[5,"rcarr1",E,R[248],N,[[],[["clone"],["ix1"],[R[251],["ix1"]]]]],[5,"aview0",E,"Create a zero-dimensional array view borrowing `x`.",N,[[["a"]],["arrayview0"]]],[5,"aview1",E,"Create a one-dimensional array view with elements…",N,[[],[R[284]]]],[5,"aview2",E,"Create a two-dimensional array view with elements…",N,[[],["arrayview2"]]],[5,"aview_mut1",E,"Create a one-dimensional read-write array view with…",N,[[],[R[285]]]],[5,"aview_mut2",E,"Create a two-dimensional read-write array view with…",N,[[],["arrayviewmut2"]]],[5,"arr2",E,R[249],N,[[],[["array2"],["clone"]]]],[5,"rcarr2",E,R[249],N,[[],[["clone"],["ix2"],[R[251],["ix2"]]]]],[5,"arr3",E,R[250],N,[[],[["array3"],["clone"]]]],[5,"rcarr3",E,R[250],N,[[],[[R[251],["ix3"]],["clone"],["ix3"]]]],[0,"iter",E,"Producers, iterables and iterators.",N,N],[3,"Axes",R[257],"An iterator over the length and stride of each axis of an…",N,N],[3,"Indices",E,"Indices producer and iterable.",N,N],[3,R[391],E,"An iterator over the indexes of an array shape.",N,N],[3,R[374],E,R[252],N,N],[3,R[375],E,R[252],N,N],[3,"AxisIter",E,R[253],N,N],[3,R[373],E,R[253],N,N],[3,R[392],E,R[255],N,N],[3,R[393],E,R[254],N,N],[3,R[394],E,R[254],N,N],[3,R[395],E,R[255],N,N],[3,R[396],E,"An iterator over the indexes and elements of an array.",N,N],[3,R[397],E,"An iterator over the indexes and elements of an array…",N,N],[3,"Iter",E,"An iterator over the elements of an array.",N,N],[3,"IterMut",E,"An iterator over the elements of an array (mutable).",N,N],[3,"Lanes",E,"See `.lanes()` for more information.",N,N],[3,R[398],E,"An iterator that traverses over all axes but one, and…",N,N],[3,R[399],E,"An iterator that traverses over all dimensions but the…",N,N],[3,"LanesMut",E,"See `.lanes_mut()` for more information.",N,N],[3,"Windows",E,"Window producer and iterable",N,N],[11,"kind",R[294],"Return the `ErrorKind` of this error.",7,[[["self"]],[R[256]]]],[11,"from_kind",E,"Create a new `ShapeError`",7,[[[R[256]]],["self"]]],[11,R[259],R[257],R[258],8,[[[R[0]]]]],[11,R[259],E,R[258],9,[[[R[0]]]]],[11,R[259],E,R[260],10,[[[R[0]]]]],[11,R[259],E,R[260],11,[[[R[0]]]]],[11,"size",R[294],"Return the size of the shape in number of elements",12,[[["self"]],[R[0]]]],[11,"new",E,"Create a new `Slice` with the given extents.",2,[[["isize"],[R[2],["isize"]]],["slice"]]],[11,"step_by",E,"Create a new `Slice` with the given step size (multiplied…",2,[[["isize"]],["self"]]],[11,"is_slice",E,"Returns `true` if `self` is a `Slice` value.",4,[[["self"]],["bool"]]],[11,"is_index",E,"Returns `true` if `self` is an `Index` value.",4,[[["self"]],["bool"]]],[11,"step_by",E,"Returns a new `SliceOrIndex` with the given step size…",4,[[["isize"]],["self"]]],[11,"new",E,"Returns a new `SliceInfo` instance.",13,[[[T]],[[R[247]],[R[261]],[R[7],[R[261],R[247]]]]]],[11,"out_ndim",E,"Returns the number of dimensions after calling `.slice()`…",13,[[["self"]],[R[0]]]],[11,"from",E,"Create a new `Zip` from the input array or other producer…",14,[[["ip"]],["self"]]],[11,"indexed",E,"Create a new `Zip` with an index producer and the producer…",14,[[["ip"]],["self"]]],[11,"size",E,"Return a the number of element tuples in the Zip",14,[[["self"]],[R[0]]]],[11,"apply",E,R[263],14,[[["f"]]]],[11,"fold",E,R[264],14,[[["acc"],["f"]],["acc"]]],[11,R[262],E,R[265],14,[[["acc"],["f"]],[R[63]]]],[11,"all",E,R[266],14,[[["f"]],["bool"]]],[11,"and",E,R[267],14,[[["p"]],["zip"]]],[11,R[268],E,R[269],14,[[["p"]],["zip"]]],[11,"split",E,R[270],14,[[]]],[11,"apply",E,R[263],14,[[["f"]]]],[11,"fold",E,R[264],14,[[["acc"],["f"]],["acc"]]],[11,R[262],E,R[265],14,[[["acc"],["f"]],[R[63]]]],[11,"all",E,R[266],14,[[["f"]],["bool"]]],[11,"and",E,R[267],14,[[["p"]],["zip"]]],[11,R[268],E,R[269],14,[[["p"]],["zip"]]],[11,"split",E,R[270],14,[[]]],[11,"apply",E,R[263],14,[[["f"]]]],[11,"fold",E,R[264],14,[[["acc"],["f"]],["acc"]]],[11,R[262],E,R[265],14,[[["acc"],["f"]],[R[63]]]],[11,"all",E,R[266],14,[[["f"]],["bool"]]],[11,"and",E,R[267],14,[[["p"]],["zip"]]],[11,R[268],E,R[269],14,[[["p"]],["zip"]]],[11,"split",E,R[270],14,[[]]],[11,"apply",E,R[263],14,[[["f"]]]],[11,"fold",E,R[264],14,[[["acc"],["f"]],["acc"]]],[11,R[262],E,R[265],14,[[["acc"],["f"]],[R[63]]]],[11,"all",E,R[266],14,[[["f"]],["bool"]]],[11,"and",E,R[267],14,[[["p"]],["zip"]]],[11,R[268],E,R[269],14,[[["p"]],["zip"]]],[11,"split",E,R[270],14,[[]]],[11,"apply",E,R[263],14,[[["f"]]]],[11,"fold",E,R[264],14,[[["acc"],["f"]],["acc"]]],[11,R[262],E,R[265],14,[[["acc"],["f"]],[R[63]]]],[11,"all",E,R[266],14,[[["f"]],["bool"]]],[11,"and",E,R[267],14,[[["p"]],["zip"]]],[11,R[268],E,R[269],14,[[["p"]],["zip"]]],[11,"split",E,R[270],14,[[]]],[11,"apply",E,R[263],14,[[["f"]]]],[11,"fold",E,R[264],14,[[["acc"],["f"]],["acc"]]],[11,R[262],E,R[265],14,[[["acc"],["f"]],[R[63]]]],[11,"all",E,R[266],14,[[["f"]],["bool"]]],[11,"split",E,R[270],14,[[]]],[11,R[33],E,"Return the inner value",5,[[],[T]]],[11,"is_done",E,"Return true if it is `Done`, false if `Continue`",5,[[["self"]],["bool"]]],[11,"axis",E,"Return axis",1,[[],["axis"]]],[11,"len",E,"Return length",1,[[],["ix"]]],[11,"stride",E,"Return stride",1,[[],["ixs"]]],[11,"index",E,"Return the index of the axis.",0,[[],[R[0]]]],[0,"prelude",E,"ndarray prelude.",N,N],[11,"from_vec",E,R[339],15,[[["vec"]],["self"]]],[11,"linspace",E,"Create a one-dimensional array with `n` evenly spaced…",15,[[["a"],[R[0]]],["self"]]],[11,"range",E,"Create a one-dimensional array with elements from `start`…",15,[[["a"]],["self"]]],[11,"logspace",E,"Create a one-dimensional array with `n` logarithmically…",15,[[["a"],[R[0]]],["self"]]],[11,"geomspace",E,"Create a one-dimensional array with `n` geometrically…",15,[[["a"],[R[0]]],[R[2]]]],[11,"eye",E,"Create an identity matrix of size `n` (square 2D array).",15,[[["ix"]],["self"]]],[11,"from_diag",E,"Create a 2D matrix from its diagonal",15,[[[R[271]]],["self"]]],[11,"from_elem",E,"Create an array with copies of `elem`, shape `shape`.",15,[[["a"],["sh"]],["self"]]],[11,"zeros",E,"Create an array with zeros, shape `shape`.",15,[[["sh"]],["self"]]],[11,"ones",E,"Create an array with ones, shape `shape`.",15,[[["sh"]],["self"]]],[11,"default",E,"Create an array with default values, shape `shape`",15,[[["sh"]],["self"]]],[11,"from_shape_fn",E,"Create an array with values created by the function `f`.",15,[[["f"],["sh"]],["self"]]],[11,"from_shape_vec",E,"Create an array with the given shape from a vector. (No…",15,[[["vec"],["sh"]],[[R[247]],[R[7],[R[247]]]]]],[11,"from_shape_vec_unchecked",E,"Creates an array from a vector and interpret it according…",15,[[["vec"],["sh"]],["self"]]],[11,"uninitialized",E,"Create an array with uninitalized elements, shape `shape`.",15,[[["sh"]],["self"]]],[11,"len",E,"Return the total number of elements in the array.",15,[[["self"]],[R[0]]]],[11,"len_of",E,"Return the length of `axis`.",15,[[["self"],["axis"]],[R[0]]]],[11,"is_empty",E,"Return whether the array has any elements",15,[[["self"]],["bool"]]],[11,"ndim",E,"Return the number of dimensions (axes) in the array",15,[[["self"]],[R[0]]]],[11,"dim",E,"Return the shape of the array in its “pattern” form, an…",15,[[["self"]]]],[11,"raw_dim",E,"Return the shape of the array as it stored in the array.",15,[[["self"]],["d"]]],[11,"shape",E,"Return the shape of the array as a slice.",15,[[["self"]]]],[11,"strides",E,"Return the strides of the array as a slice.",15,[[["self"]]]],[11,"stride_of",E,"Return the stride of `axis`.",15,[[["self"],["axis"]],["isize"]]],[11,"view",E,"Return a read-only view of the array",15,[[["self"]],[R[272]]]],[11,"view_mut",E,"Return a read-write view of the array",15,[[["self"]],[R[273]]]],[11,R[305],E,"Return an uniquely owned copy of the array.",15,[[["self"]],["array"]]],[11,"to_shared",E,"Return a shared ownership (copy on write) array.",15,[[["self"]],[R[251]]]],[11,R[311],E,"Turn the array into a uniquely owned array, cloning the…",15,[[],["array"]]],[11,R[313],E,"Turn the array into a shared ownership (copy on write)…",15,[[],[R[251]]]],[11,"first",E,"Returns a reference to the first element of the array, or…",15,[[["self"]],[["a"],[R[2]]]]],[11,"first_mut",E,"Returns a mutable reference to the first element of the…",15,[[["self"]],[["a"],[R[2]]]]],[11,"iter",E,"Return an iterator of references to the elements of the…",15,[[["self"]],["iter"]]],[11,"iter_mut",E,"Return an iterator of mutable references to the elements…",15,[[["self"]],["itermut"]]],[11,"indexed_iter",E,"Return an iterator of indexes and references to the…",15,[[["self"]],[R[336]]]],[11,"indexed_iter_mut",E,"Return an iterator of indexes and mutable references to…",15,[[["self"]],["indexeditermut"]]],[11,"slice",E,"Return a sliced view of the array.",15,[[["self"],[R[261]]],[R[272]]]],[11,R[318],E,"Return a sliced read-write view of the array.",15,[[["self"],[R[261]]],[R[273]]]],[11,"slice_move",E,"Slice the array, possibly changing the number of dimensions.",15,[[[R[261]]],[R[271]]]],[11,"slice_collapse",E,R[274],15,[[["self"]]]],[11,"slice_inplace",E,R[274],15,[[["self"]]]],[11,"slice_axis",E,"Return a view of the array, sliced along the specified axis.",15,[[["self"],["slice"],["axis"]],[R[272]]]],[11,"slice_axis_mut",E,"Return a mutable view of the array, sliced along the…",15,[[["self"],["slice"],["axis"]],[R[273]]]],[11,"slice_axis_inplace",E,"Slice the array in place along the specified axis.",15,[[["self"],["slice"],["axis"]]]],[11,"get",E,"Return a reference to the element at `index`, or return…",15,[[["self"],["i"]],[["a"],[R[2]]]]],[11,"get_mut",E,"Return a mutable reference to the element at `index`, or…",15,[[["self"],["i"]],[["a"],[R[2]]]]],[11,"uget",E,R[275],15,[[["self"],["i"]],["a"]]],[11,"uget_mut",E,R[275],15,[[["self"],["i"]],["a"]]],[11,"swap",E,"Swap elements at indices `index1` and `index2`.",15,[[["self"],["i"]]]],[11,"uswap",E,"Swap elements unchecked at indices `index1` and `index2`.",15,[[["self"],["i"]]]],[11,"index_axis",E,"Returns a view restricted to `index` along the axis, with…",15,[[["self"],[R[0]],["axis"]],[R[272]]]],[11,"index_axis_mut",E,"Returns a mutable view restricted to `index` along the…",15,[[["self"],[R[0]],["axis"]],[R[273]]]],[11,"index_axis_move",E,R[291],15,[[[R[0]],["axis"]],[R[271]]]],[11,"collapse_axis",E,"Selects `index` along the axis, collapsing the axis into…",15,[[["self"],[R[0]],["axis"]]]],[11,"subview",E,"Along `axis`, select the subview `index` and return a view…",15,[[["self"],["ix"],["axis"]],[R[272]]]],[11,"subview_mut",E,"Along `axis`, select the subview `index` and return a…",15,[[["self"],["ix"],["axis"]],[R[273]]]],[11,"subview_inplace",E,"Collapse dimension `axis` into length one, and select the…",15,[[["self"],["ix"],["axis"]]]],[11,"into_subview",E,"Along `axis`, select the subview `index` and return `self`…",15,[[["ix"],["axis"]],[R[271]]]],[11,"select",E,"Along `axis`, select arbitrary subviews corresponding to…",15,[[["self"],["axis"]],["array"]]],[11,"genrows",E,R[276],15,[[["self"]],["lanes"]]],[11,"genrows_mut",E,R[276],15,[[["self"]],[R[278]]]],[11,"gencolumns",E,R[276],15,[[["self"]],["lanes"]]],[11,"gencolumns_mut",E,R[276],15,[[["self"]],[R[278]]]],[11,"lanes",E,R[277],15,[[["self"],["axis"]],["lanes"]]],[11,"lanes_mut",E,R[277],15,[[["self"],["axis"]],[R[278]]]],[11,"outer_iter",E,R[279],15,[[["self"]],["axisiter"]]],[11,"outer_iter_mut",E,R[279],15,[[["self"]],[R[281]]]],[11,"axis_iter",E,R[280],15,[[["self"],["axis"]],["axisiter"]]],[11,"axis_iter_mut",E,R[280],15,[[["self"],["axis"]],[R[281]]]],[11,"axis_chunks_iter",E,R[282],15,[[["self"],[R[0]],["axis"]],["axischunksiter"]]],[11,"axis_chunks_iter_mut",E,R[282],15,[[["self"],[R[0]],["axis"]],["axischunksitermut"]]],[11,"exact_chunks",E,R[283],15,[[["self"],["e"]],["exactchunks"]]],[11,"exact_chunks_mut",E,R[283],15,[[["self"],["e"]],["exactchunksmut"]]],[11,"windows",E,"Return a window producer and iterable.",15,[[["self"],["e"]],["windows"]]],[11,"diag",E,"Return an view of the diagonal elements of the array.",15,[[["self"]],[R[284]]]],[11,"diag_mut",E,"Return a read-write view over the diagonal elements of the…",15,[[["self"]],[R[285]]]],[11,"into_diag",E,"Return the diagonal as a one-dimensional array.",15,[[],[["ix1"],[R[271],["ix1"]]]]],[11,"is_standard_layout",E,"Return `true` if the array data is laid out in contiguous…",15,[[["self"]],["bool"]]],[11,"as_standard_layout",E,"Return a standard-layout array containing the data,…",15,[[["self"]],[R[345]]]],[11,"as_ptr",E,"Return a pointer to the first element in the array.",15,[[["self"]]]],[11,"as_mut_ptr",E,"Return a mutable pointer to the first element in the array.",15,[[["self"]]]],[11,"raw_view",E,"Return a raw view of the array.",15,[[["self"]],["rawarrayview"]]],[11,"raw_view_mut",E,"Return a raw mutable view of the array.",15,[[["self"]],["rawarrayviewmut"]]],[11,"as_slice",E,R[286],15,[[["self"]],[R[2]]]],[11,"as_slice_mut",E,R[286],15,[[["self"]],[R[2]]]],[11,"as_slice_memory_order",E,R[287],15,[[["self"]],[R[2]]]],[11,"as_slice_memory_order_mut",E,R[287],15,[[["self"]],[R[2]]]],[11,R[298],E,"Transform the array into `shape`; any shape with the same…",15,[[["e"]],[[R[271]],[R[7],[R[271],R[247]]],[R[247]]]]],[11,"reshape",E,"Note: Reshape is for `ArcArray` only. Use `.into_shape()`…",15,[[["self"],["e"]],[R[271]]]],[11,R[360],E,"Convert any array or array view to a dynamic dimensional…",15,[[],[["ixdyn"],[R[271],["ixdyn"]]]]],[11,"into_dimensionality",E,"Convert an array or array view to another with the same…",15,[[],[[R[271]],[R[247]],[R[7],[R[271],R[247]]]]]],[11,"broadcast",E,"Act like a larger size and/or shape array by broadcasting…",15,[[["self"],["e"]],[[R[272]],[R[2],[R[272]]]]]],[11,"swap_axes",E,"Swap axes `ax` and `bx`.",15,[[["self"],[R[0]]]]],[11,"permuted_axes",E,"Permute the axes.",15,[[[T]],[R[271]]]],[11,"reversed_axes",E,"Transpose the array by reversing axes.",15,[[],[R[271]]]],[11,T,E,"Return a transposed view of the array.",15,[[["self"]],[R[272]]]],[11,"axes",E,"Return an iterator over the length and stride of each axis.",15,[[["self"]],["axes"]]],[11,R[323],E,"Return the axis with the greatest stride (by absolute…",15,[[["self"]],["axis"]]],[11,"invert_axis",E,"Reverse the stride of `axis`.",15,[[["self"],["axis"]]]],[11,"merge_axes",E,"If possible, merge in the axis `take` to `into`.",15,[[["self"],["axis"]],["bool"]]],[11,R[320],E,"Insert new array axis at `axis` and return the result.",15,[[["axis"]],[R[271]]]],[11,R[296],E,"Remove array axis `axis` and return the result.",15,[[["axis"]],[R[271]]]],[11,"assign",E,"Perform an elementwise assigment to `self` from `rhs`.",15,[[["self"],[R[271]]]]],[11,"fill",E,"Perform an elementwise assigment to `self` from element `x`.",15,[[["self"],["a"]]]],[11,"zip_mut_with",E,"Traverse two arrays in unspecified order, in lock step,…",15,[[["self"],[R[271]],["f"]]]],[11,"fold",E,"Traverse the array elements and apply a fold, returning…",15,[[["self"],["b"],["f"]],["b"]]],[11,"map",E,"Call `f` by reference on each element and create a new…",15,[[["self"],["f"]],["array"]]],[11,"map_mut",E,"Call `f` on a mutable reference of each element and create…",15,[[["self"],["f"]],["array"]]],[11,"mapv",E,"Call `f` by value on each element and create a new array…",15,[[["self"],["f"]],["array"]]],[11,"mapv_into",E,"Call `f` by value on each element, update the array with…",15,[[["f"]],["self"]]],[11,"map_inplace",E,"Modify the array in place by calling `f` by mutable…",15,[[["self"],["f"]]]],[11,"mapv_inplace",E,"Modify the array in place by calling `f` by value on each…",15,[[["self"],["f"]]]],[11,"visit",E,"Visit each element in the array by calling `f` by…",15,[[["self"],["f"]]]],[11,"fold_axis",E,"Fold along an axis.",15,[[["self"],["axis"],["b"],["f"]],["array"]]],[11,"map_axis",E,R[288],15,[[["self"],["f"],["axis"]],["array"]]],[11,"map_axis_mut",E,R[288],15,[[["f"],["self"],["axis"]],["array"]]],[11,"accumulate_axis_inplace",E,"Iterates over pairs of consecutive elements along the axis.",15,[[["self"],["f"],["axis"]]]],[11,"to_vec",E,"Return an vector with the elements of the one-dimensional…",15,[[["self"]],["vec"]]],[11,"row",E,"Return an array view of row `index`.",15,[[["self"],["ix"]],[R[284]]]],[11,"row_mut",E,"Return a mutable array view of row `index`.",15,[[["self"],["ix"]],[R[285]]]],[11,"nrows",E,R[289],15,[[["self"]],[R[0]]]],[11,"rows",E,R[289],15,[[["self"]],[R[0]]]],[11,"column",E,"Return an array view of column `index`.",15,[[["self"],["ix"]],[R[284]]]],[11,"column_mut",E,"Return a mutable array view of column `index`.",15,[[["self"],["ix"]],[R[285]]]],[11,"ncols",E,R[290],15,[[["self"]],[R[0]]]],[11,"cols",E,R[290],15,[[["self"]],[R[0]]]],[11,"is_square",E,"Return true if the array is square, false otherwise.",15,[[["self"]],["bool"]]],[11,"insert_axis_inplace",E,"Insert new array axis of length 1 at `axis`, modifying the…",15,[[["self"],["axis"]]]],[11,"index_axis_inplace",E,R[291],15,[[["self"],[R[0]],["axis"]]]],[11,"sum",E,R[292],15,[[["self"]],["a"]]],[11,"mean",E,"Returns the [arithmetic mean] x̅ of all elements in the…",15,[[["self"]],[R[2]]]],[11,"scalar_sum",E,R[292],15,[[["self"]],["a"]]],[11,"product",E,"Return the product of all elements in the array.",15,[[["self"]],["a"]]],[11,"sum_axis",E,"Return sum along `axis`.",15,[[["self"],["axis"]],["array"]]],[11,"mean_axis",E,"Return mean along `axis`.",15,[[["self"],["axis"]],[["array"],[R[2],["array"]]]]],[11,"var_axis",E,"Return variance along `axis`.",15,[[["self"],["a"],["axis"]],["array"]]],[11,"std_axis",E,"Return standard deviation along `axis`.",15,[[["self"],["a"],["axis"]],["array"]]],[11,"all_close",E,"Return `true` if the arrays' elementwise differences are…",15,[[["self"],[R[271]],["a"]],["bool"]]],[0,"linalg",E,"Linear algebra.",N,N],[5,"general_mat_mul",R[293],"General matrix-matrix multiplication.",N,[[["a"],[R[271]],[R[271]],[R[271]]]]],[5,"general_mat_vec_mul",E,"General matrix-vector multiplication.",N,[[["a"],[R[271]],[R[271]],[R[271]]]]],[11,"dot",R[294],"Perform dot product or matrix multiplication of arrays…",15,[[["self"],["rhs"]]]],[11,"dot",E,"Perform matrix multiplication of rectangular arrays `self`…",15,[[["self"],["rhs"]]]],[11,"scaled_add",E,"Perform the operation `self += alpha * rhs` efficiently,…",15,[[["self"],["a"],[R[271]]]]],[8,"Dot",R[293],"Matrix Multiplication",N,N],[16,"Output",E,"The result of the operation.",16,N],[10,"dot",E,E,16,[[["self"],["rhs"]]]],[6,"Ix0",R[294],"zero-dimensionial",N,N],[6,"Ix1",E,"one-dimensional",N,N],[6,"Ix2",E,"two-dimensional",N,N],[6,"Ix3",E,"three-dimensional",N,N],[6,"Ix4",E,"four-dimensional",N,N],[6,"Ix5",E,"five-dimensional",N,N],[6,"Ix6",E,"six-dimensional",N,N],[6,"IxDyn",E,"dynamic-dimensional",N,N],[6,"Array0",E,"zero-dimensional array",N,N],[6,"Array1",E,"one-dimensional array",N,N],[6,"Array2",E,"two-dimensional array",N,N],[6,"Array3",E,"three-dimensional array",N,N],[6,"Array4",E,"four-dimensional array",N,N],[6,"Array5",E,"five-dimensional array",N,N],[6,"Array6",E,"six-dimensional array",N,N],[6,"ArrayD",E,"dynamic-dimensional array",N,N],[6,"ArrayView0",E,"zero-dimensional array view",N,N],[6,"ArrayView1",E,"one-dimensional array view",N,N],[6,"ArrayView2",E,"two-dimensional array view",N,N],[6,"ArrayView3",E,"three-dimensional array view",N,N],[6,"ArrayView4",E,"four-dimensional array view",N,N],[6,"ArrayView5",E,"five-dimensional array view",N,N],[6,"ArrayView6",E,"six-dimensional array view",N,N],[6,"ArrayViewD",E,"dynamic-dimensional array view",N,N],[6,"ArrayViewMut0",E,"zero-dimensional read-write array view",N,N],[6,"ArrayViewMut1",E,"one-dimensional read-write array view",N,N],[6,"ArrayViewMut2",E,"two-dimensional read-write array view",N,N],[6,"ArrayViewMut3",E,"three-dimensional read-write array view",N,N],[6,"ArrayViewMut4",E,"four-dimensional read-write array view",N,N],[6,"ArrayViewMut5",E,"five-dimensional read-write array view",N,N],[6,"ArrayViewMut6",E,"six-dimensional read-write array view",N,N],[6,"ArrayViewMutD",E,"dynamic-dimensional read-write array view",N,N],[6,"RcArray1",E,"one-dimensional shared ownership array",N,N],[6,"RcArray2",E,"two-dimensional shared ownership array",N,N],[6,"Ix",E,"Array index type",N,N],[6,"Ixs",E,"Array index type (signed)",N,N],[6,"RcArray",E,R[295],N,N],[6,"ArcArray",E,R[295],N,N],[6,"Array",E,"An array that owns its data uniquely.",N,N],[6,"CowArray",E,"An array with copy-on-write behavior.",N,N],[6,R[400],E,"A read-only array view.",N,N],[6,R[401],E,"A read-write array view.",N,N],[6,R[402],E,"A read-only array view without a lifetime.",N,N],[6,R[403],E,"A mutable array view without a lifetime.",N,N],[8,R[378],E,"Array shape and index trait.",N,N],[18,"NDIM",E,R[353],17,N],[16,"SliceArg",E,"`SliceArg` is the type which is used to specify slicing…",17,N],[16,"Pattern",E,"Pattern matching friendly form of the dimension value.",17,N],[16,"Smaller",E,"Next smaller dimension (if applicable)",17,N],[16,"Larger",E,"Next larger dimension",17,N],[10,"ndim",E,"Returns the number of dimensions (number of axes).",17,[[["self"]],[R[0]]]],[10,R[319],E,"Convert the dimension into a pattern matching friendly…",17,[[]]],[11,"size",E,R[354],17,[[["self"]],[R[0]]]],[11,R[321],E,R[355],17,[[["self"]],[[R[0]],[R[2],[R[0]]]]]],[11,R[356],E,R[357],17,[[["self"]],[["ix"],[R[284],["ix"]]]]],[11,R[358],E,R[359],17,[[["self"]],[["ix"],[R[285],["ix"]]]]],[10,"zeros",E,"Creates a dimension of all zeros with the specified ndim.",17,[[[R[0]]],["self"]]],[11,R[360],E,R[361],17,[[],["ixdyn"]]],[10,R[300],E,R[301],17,[[["self"]],[R[302]]]],[8,R[379],E,"Argument conversion a dimension.",N,N],[16,"Dim",E,E,18,N],[10,R[317],E,E,18,[[]]],[8,R[380],E,"Array shape with a next smaller dimension.",N,N],[10,R[296],E,E,19,[[["self"],["axis"]]]],[8,"NdIndex",E,"Tuple or fixed size arrays that can be used to index an…",N,N],[8,"AsArray",E,"Argument conversion into an array view",N,N],[8,"LinalgScalar",E,"Elements that support linear algebra operations.",N,N],[8,"NdFloat",E,"Floating-point element types `f32` and `f64`.",N,N],[8,R[381],E,"Extra indexing methods for array views",N,N],[16,"Output",E,"The type of the reference to the element that is produced,…",20,N],[10,"index",E,R[297],20,[[["i"]]]],[10,"get",E,R[297],20,[[["i"]],[R[2]]]],[10,"uget",E,"Get a reference of a element through the view without…",20,[[["i"]]]],[8,R[382],E,"A trait for `Shape` and `D where D: Dimension` that allows…",N,N],[16,"Dim",E,E,21,N],[16,"Strides",E,E,21,N],[10,R[298],E,E,21,[[],["shape"]]],[10,"f",E,E,21,[[],["shape"]]],[10,"set_f",E,E,21,[[["bool"]],["shape"]]],[10,"strides",E,E,21,[[],[R[315]]]],[8,"Data",E,R[299],N,N],[8,"DataClone",E,R[299],N,N],[8,"DataMut",E,R[299],N,N],[8,"DataOwned",E,R[299],N,N],[8,"DataShared",E,R[299],N,N],[8,"RawData",E,R[299],N,N],[16,"Elem",E,"The array element type.",22,N],[10,R[300],E,R[301],22,[[["self"]],[R[302]]]],[8,"RawDataClone",E,R[299],N,N],[8,"RawDataMut",E,R[299],N,N],[8,R[383],E,"Fixed-size array used for array initialization",N,N],[16,"Elem",E,E,23,N],[10,"as_init_slice",E,E,23,[[["self"]]]],[10,"len",E,E,23,[[],[R[0]]]],[8,R[384],E,"Argument conversion into a producer.",N,N],[16,"Item",E,R[303],24,N],[16,"Dim",E,"Dimension type of the producer",24,N],[16,"Output",E,E,24,N],[10,"into_producer",E,"Convert the value into an `NdProducer`.",24,[[]]],[8,R[385],E,"A producer of an n-dimensional set of elements; for…",N,N],[16,"Item",E,R[303],25,N],[16,"Dim",E,"Dimension type",25,N],[10,R[300],E,R[301],25,[[["self"]],[R[302]]]],[8,"ScalarOperand",E,"Elements that can be used as direct operands in arithmetic…",N,N],[11,"is_view",E,"Returns `true` iff the data is the `View` variant.",6,[[["self"]],["bool"]]],[11,"is_owned",E,"Returns `true` iff the data is the `Owned` variant.",6,[[["self"]],["bool"]]],[14,"array",E,"Create an `Array` with one, two or three dimensions.",N,N],[14,"s",E,"Slice argument constructor.",N,N],[14,"stack",E,R[304],N,N],[14,"azip",E,"Array zip macro: lock step function application across…",N,N],[11,R[305],E,E,26,[[["self"]],[T]]],[11,R[238],E,E,26,[[["self"],[T]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[51],E,E,26,[[[U]],[R[7]]]],[11,R[52],E,E,26,[[],[R[7]]]],[11,R[53],E,E,26,[[["self"]],[T]]],[11,R[55],E,E,26,[[["self"]],[T]]],[11,R[54],E,E,26,[[["self"]],[R[56]]]],[11,R[305],E,E,0,[[["self"]],[T]]],[11,R[238],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,R[305],E,E,1,[[["self"]],[T]]],[11,R[238],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[51],E,E,1,[[[U]],[R[7]]]],[11,R[52],E,E,1,[[],[R[7]]]],[11,R[53],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[54],E,E,1,[[["self"]],[R[56]]]],[11,R[305],E,E,27,[[["self"]],[T]]],[11,R[238],E,E,27,[[["self"],[T]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[51],E,E,27,[[[U]],[R[7]]]],[11,R[52],E,E,27,[[],[R[7]]]],[11,R[53],E,E,27,[[["self"]],[T]]],[11,R[55],E,E,27,[[["self"]],[T]]],[11,R[54],E,E,27,[[["self"]],[R[56]]]],[11,R[305],E,E,7,[[["self"]],[T]]],[11,R[238],E,E,7,[[["self"],[T]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[227],E,E,7,[[["self"]],["string"]]],[11,R[51],E,E,7,[[[U]],[R[7]]]],[11,R[52],E,E,7,[[],[R[7]]]],[11,R[53],E,E,7,[[["self"]],[T]]],[11,R[55],E,E,7,[[["self"]],[T]]],[11,R[54],E,E,7,[[["self"]],[R[56]]]],[11,R[305],E,E,2,[[["self"]],[T]]],[11,R[238],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[51],E,E,2,[[[U]],[R[7]]]],[11,R[52],E,E,2,[[],[R[7]]]],[11,R[53],E,E,2,[[["self"]],[T]]],[11,R[55],E,E,2,[[["self"]],[T]]],[11,R[54],E,E,2,[[["self"]],[R[56]]]],[11,R[305],E,E,13,[[["self"]],[T]]],[11,R[238],E,E,13,[[["self"],[T]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[51],E,E,13,[[[U]],[R[7]]]],[11,R[52],E,E,13,[[],[R[7]]]],[11,R[53],E,E,13,[[["self"]],[T]]],[11,R[55],E,E,13,[[["self"]],[T]]],[11,R[54],E,E,13,[[["self"]],[R[56]]]],[11,R[305],E,E,14,[[["self"]],[T]]],[11,R[238],E,E,14,[[["self"],[T]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[51],E,E,14,[[[U]],[R[7]]]],[11,R[52],E,E,14,[[],[R[7]]]],[11,R[53],E,E,14,[[["self"]],[T]]],[11,R[55],E,E,14,[[["self"]],[T]]],[11,R[54],E,E,14,[[["self"]],[R[56]]]],[11,R[305],E,E,15,[[["self"]],[T]]],[11,R[238],E,E,15,[[["self"],[T]]]],[11,"into",E,E,15,[[],[U]]],[11,R[8],E,E,15,[[],["i"]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[227],E,E,15,[[["self"]],["string"]]],[11,R[51],E,E,15,[[[U]],[R[7]]]],[11,R[52],E,E,15,[[],[R[7]]]],[11,R[53],E,E,15,[[["self"]],[T]]],[11,R[55],E,E,15,[[["self"]],[T]]],[11,R[54],E,E,15,[[["self"]],[R[56]]]],[11,R[305],E,E,28,[[["self"]],[T]]],[11,R[238],E,E,28,[[["self"],[T]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[51],E,E,28,[[[U]],[R[7]]]],[11,R[52],E,E,28,[[],[R[7]]]],[11,R[53],E,E,28,[[["self"]],[T]]],[11,R[55],E,E,28,[[["self"]],[T]]],[11,R[54],E,E,28,[[["self"]],[R[56]]]],[11,R[305],E,E,29,[[["self"]],[T]]],[11,R[238],E,E,29,[[["self"],[T]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[51],E,E,29,[[[U]],[R[7]]]],[11,R[52],E,E,29,[[],[R[7]]]],[11,R[53],E,E,29,[[["self"]],[T]]],[11,R[55],E,E,29,[[["self"]],[T]]],[11,R[54],E,E,29,[[["self"]],[R[56]]]],[11,R[305],E,E,30,[[["self"]],[T]]],[11,R[238],E,E,30,[[["self"],[T]]]],[11,"into",E,E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[51],E,E,30,[[[U]],[R[7]]]],[11,R[52],E,E,30,[[],[R[7]]]],[11,R[53],E,E,30,[[["self"]],[T]]],[11,R[55],E,E,30,[[["self"]],[T]]],[11,R[54],E,E,30,[[["self"]],[R[56]]]],[11,R[305],E,E,31,[[["self"]],[T]]],[11,R[238],E,E,31,[[["self"],[T]]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[51],E,E,31,[[[U]],[R[7]]]],[11,R[52],E,E,31,[[],[R[7]]]],[11,R[53],E,E,31,[[["self"]],[T]]],[11,R[55],E,E,31,[[["self"]],[T]]],[11,R[54],E,E,31,[[["self"]],[R[56]]]],[11,R[305],E,E,12,[[["self"]],[T]]],[11,R[238],E,E,12,[[["self"],[T]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[51],E,E,12,[[[U]],[R[7]]]],[11,R[52],E,E,12,[[],[R[7]]]],[11,R[53],E,E,12,[[["self"]],[T]]],[11,R[55],E,E,12,[[["self"]],[T]]],[11,R[54],E,E,12,[[["self"]],[R[56]]]],[11,R[305],E,E,32,[[["self"]],[T]]],[11,R[238],E,E,32,[[["self"],[T]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[51],E,E,32,[[[U]],[R[7]]]],[11,R[52],E,E,32,[[],[R[7]]]],[11,R[53],E,E,32,[[["self"]],[T]]],[11,R[55],E,E,32,[[["self"]],[T]]],[11,R[54],E,E,32,[[["self"]],[R[56]]]],[11,R[305],E,E,3,[[["self"]],[T]]],[11,R[238],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[51],E,E,3,[[[U]],[R[7]]]],[11,R[52],E,E,3,[[],[R[7]]]],[11,R[53],E,E,3,[[["self"]],[T]]],[11,R[55],E,E,3,[[["self"]],[T]]],[11,R[54],E,E,3,[[["self"]],[R[56]]]],[11,R[305],E,E,4,[[["self"]],[T]]],[11,R[238],E,E,4,[[["self"],[T]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[227],E,E,4,[[["self"]],["string"]]],[11,R[51],E,E,4,[[[U]],[R[7]]]],[11,R[52],E,E,4,[[],[R[7]]]],[11,R[53],E,E,4,[[["self"]],[T]]],[11,R[55],E,E,4,[[["self"]],[T]]],[11,R[54],E,E,4,[[["self"]],[R[56]]]],[11,R[305],E,E,5,[[["self"]],[T]]],[11,R[238],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[51],E,E,5,[[[U]],[R[7]]]],[11,R[52],E,E,5,[[],[R[7]]]],[11,R[53],E,E,5,[[["self"]],[T]]],[11,R[55],E,E,5,[[["self"]],[T]]],[11,R[54],E,E,5,[[["self"]],[R[56]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[51],E,E,6,[[[U]],[R[7]]]],[11,R[52],E,E,6,[[],[R[7]]]],[11,R[53],E,E,6,[[["self"]],[T]]],[11,R[55],E,E,6,[[["self"]],[T]]],[11,R[54],E,E,6,[[["self"]],[R[56]]]],[11,R[305],R[257],E,33,[[["self"]],[T]]],[11,R[238],E,E,33,[[["self"],[T]]]],[11,"into",E,E,33,[[],[U]]],[11,R[8],E,E,33,[[],["i"]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[51],E,E,33,[[[U]],[R[7]]]],[11,R[52],E,E,33,[[],[R[7]]]],[11,R[53],E,E,33,[[["self"]],[T]]],[11,R[55],E,E,33,[[["self"]],[T]]],[11,R[54],E,E,33,[[["self"]],[R[56]]]],[11,R[305],E,E,34,[[["self"]],[T]]],[11,R[238],E,E,34,[[["self"],[T]]]],[11,"into",E,E,34,[[],[U]]],[11,R[8],E,E,34,[[],["i"]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[51],E,E,34,[[[U]],[R[7]]]],[11,R[52],E,E,34,[[],[R[7]]]],[11,R[53],E,E,34,[[["self"]],[T]]],[11,R[55],E,E,34,[[["self"]],[T]]],[11,R[54],E,E,34,[[["self"]],[R[56]]]],[11,R[305],E,E,35,[[["self"]],[T]]],[11,R[238],E,E,35,[[["self"],[T]]]],[11,"into",E,E,35,[[],[U]]],[11,R[8],E,E,35,[[],["i"]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[51],E,E,35,[[[U]],[R[7]]]],[11,R[52],E,E,35,[[],[R[7]]]],[11,R[53],E,E,35,[[["self"]],[T]]],[11,R[55],E,E,35,[[["self"]],[T]]],[11,R[54],E,E,35,[[["self"]],[R[56]]]],[11,R[305],E,E,10,[[["self"]],[T]]],[11,R[238],E,E,10,[[["self"],[T]]]],[11,"into",E,E,10,[[],[U]]],[11,R[8],E,E,10,[[],["i"]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[51],E,E,10,[[[U]],[R[7]]]],[11,R[52],E,E,10,[[],[R[7]]]],[11,R[53],E,E,10,[[["self"]],[T]]],[11,R[55],E,E,10,[[["self"]],[T]]],[11,R[54],E,E,10,[[["self"]],[R[56]]]],[11,"into",E,E,11,[[],[U]]],[11,R[8],E,E,11,[[],["i"]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[51],E,E,11,[[[U]],[R[7]]]],[11,R[52],E,E,11,[[],[R[7]]]],[11,R[53],E,E,11,[[["self"]],[T]]],[11,R[55],E,E,11,[[["self"]],[T]]],[11,R[54],E,E,11,[[["self"]],[R[56]]]],[11,R[305],E,E,8,[[["self"]],[T]]],[11,R[238],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,R[8],E,E,8,[[],["i"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[51],E,E,8,[[[U]],[R[7]]]],[11,R[52],E,E,8,[[],[R[7]]]],[11,R[53],E,E,8,[[["self"]],[T]]],[11,R[55],E,E,8,[[["self"]],[T]]],[11,R[54],E,E,8,[[["self"]],[R[56]]]],[11,"into",E,E,9,[[],[U]]],[11,R[8],E,E,9,[[],["i"]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[51],E,E,9,[[[U]],[R[7]]]],[11,R[52],E,E,9,[[],[R[7]]]],[11,R[53],E,E,9,[[["self"]],[T]]],[11,R[55],E,E,9,[[["self"]],[T]]],[11,R[54],E,E,9,[[["self"]],[R[56]]]],[11,R[305],E,E,36,[[["self"]],[T]]],[11,R[238],E,E,36,[[["self"],[T]]]],[11,"into",E,E,36,[[],[U]]],[11,R[8],E,E,36,[[],["i"]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[51],E,E,36,[[[U]],[R[7]]]],[11,R[52],E,E,36,[[],[R[7]]]],[11,R[53],E,E,36,[[["self"]],[T]]],[11,R[55],E,E,36,[[["self"]],[T]]],[11,R[54],E,E,36,[[["self"]],[R[56]]]],[11,R[305],E,E,37,[[["self"]],[T]]],[11,R[238],E,E,37,[[["self"],[T]]]],[11,"into",E,E,37,[[],[U]]],[11,R[8],E,E,37,[[],["i"]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[51],E,E,37,[[[U]],[R[7]]]],[11,R[52],E,E,37,[[],[R[7]]]],[11,R[53],E,E,37,[[["self"]],[T]]],[11,R[55],E,E,37,[[["self"]],[T]]],[11,R[54],E,E,37,[[["self"]],[R[56]]]],[11,"into",E,E,38,[[],[U]]],[11,R[8],E,E,38,[[],["i"]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[51],E,E,38,[[[U]],[R[7]]]],[11,R[52],E,E,38,[[],[R[7]]]],[11,R[53],E,E,38,[[["self"]],[T]]],[11,R[55],E,E,38,[[["self"]],[T]]],[11,R[54],E,E,38,[[["self"]],[R[56]]]],[11,"into",E,E,39,[[],[U]]],[11,R[8],E,E,39,[[],["i"]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[51],E,E,39,[[[U]],[R[7]]]],[11,R[52],E,E,39,[[],[R[7]]]],[11,R[53],E,E,39,[[["self"]],[T]]],[11,R[55],E,E,39,[[["self"]],[T]]],[11,R[54],E,E,39,[[["self"]],[R[56]]]],[11,R[305],E,E,40,[[["self"]],[T]]],[11,R[238],E,E,40,[[["self"],[T]]]],[11,"into",E,E,40,[[],[U]]],[11,R[8],E,E,40,[[],["i"]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[51],E,E,40,[[[U]],[R[7]]]],[11,R[52],E,E,40,[[],[R[7]]]],[11,R[53],E,E,40,[[["self"]],[T]]],[11,R[55],E,E,40,[[["self"]],[T]]],[11,R[54],E,E,40,[[["self"]],[R[56]]]],[11,"into",E,E,41,[[],[U]]],[11,R[8],E,E,41,[[],["i"]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[51],E,E,41,[[[U]],[R[7]]]],[11,R[52],E,E,41,[[],[R[7]]]],[11,R[53],E,E,41,[[["self"]],[T]]],[11,R[55],E,E,41,[[["self"]],[T]]],[11,R[54],E,E,41,[[["self"]],[R[56]]]],[11,R[305],E,E,42,[[["self"]],[T]]],[11,R[238],E,E,42,[[["self"],[T]]]],[11,"into",E,E,42,[[],[U]]],[11,R[8],E,E,42,[[],["i"]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[51],E,E,42,[[[U]],[R[7]]]],[11,R[52],E,E,42,[[],[R[7]]]],[11,R[53],E,E,42,[[["self"]],[T]]],[11,R[55],E,E,42,[[["self"]],[T]]],[11,R[54],E,E,42,[[["self"]],[R[56]]]],[11,"into",E,E,43,[[],[U]]],[11,R[8],E,E,43,[[],["i"]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[51],E,E,43,[[[U]],[R[7]]]],[11,R[52],E,E,43,[[],[R[7]]]],[11,R[53],E,E,43,[[["self"]],[T]]],[11,R[55],E,E,43,[[["self"]],[T]]],[11,R[54],E,E,43,[[["self"]],[R[56]]]],[11,R[305],E,E,44,[[["self"]],[T]]],[11,R[238],E,E,44,[[["self"],[T]]]],[11,"into",E,E,44,[[],[U]]],[11,R[8],E,E,44,[[],["i"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[51],E,E,44,[[[U]],[R[7]]]],[11,R[52],E,E,44,[[],[R[7]]]],[11,R[53],E,E,44,[[["self"]],[T]]],[11,R[55],E,E,44,[[["self"]],[T]]],[11,R[54],E,E,44,[[["self"]],[R[56]]]],[11,R[305],E,E,45,[[["self"]],[T]]],[11,R[238],E,E,45,[[["self"],[T]]]],[11,"into",E,E,45,[[],[U]]],[11,R[8],E,E,45,[[],["i"]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[51],E,E,45,[[[U]],[R[7]]]],[11,R[52],E,E,45,[[],[R[7]]]],[11,R[53],E,E,45,[[["self"]],[T]]],[11,R[55],E,E,45,[[["self"]],[T]]],[11,R[54],E,E,45,[[["self"]],[R[56]]]],[11,"into",E,E,46,[[],[U]]],[11,R[8],E,E,46,[[],["i"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[51],E,E,46,[[[U]],[R[7]]]],[11,R[52],E,E,46,[[],[R[7]]]],[11,R[53],E,E,46,[[["self"]],[T]]],[11,R[55],E,E,46,[[["self"]],[T]]],[11,R[54],E,E,46,[[["self"]],[R[56]]]],[11,"into",E,E,47,[[],[U]]],[11,R[8],E,E,47,[[],["i"]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[51],E,E,47,[[[U]],[R[7]]]],[11,R[52],E,E,47,[[],[R[7]]]],[11,R[53],E,E,47,[[["self"]],[T]]],[11,R[55],E,E,47,[[["self"]],[T]]],[11,R[54],E,E,47,[[["self"]],[R[56]]]],[11,R[305],E,E,48,[[["self"]],[T]]],[11,R[238],E,E,48,[[["self"],[T]]]],[11,"into",E,E,48,[[],[U]]],[11,R[8],E,E,48,[[],["i"]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[51],E,E,48,[[[U]],[R[7]]]],[11,R[52],E,E,48,[[],[R[7]]]],[11,R[53],E,E,48,[[["self"]],[T]]],[11,R[55],E,E,48,[[["self"]],[T]]],[11,R[54],E,E,48,[[["self"]],[R[56]]]],[11,R[306],R[294],E,30,[[["self"]],[R[2]]]],[11,R[306],E,E,30,[[["self"]],[R[2]]]],[11,R[306],E,E,29,[[["self"]],[R[2]]]],[11,R[306],E,E,28,[[["self"]],[R[2]]]],[11,R[306],E,E,31,[[["self"]],[R[2]]]],[11,R[306],E,E,31,[[["self"]],[R[2]]]],[11,R[306],E,E,6,[[["self"]],[R[2]]]],[11,R[307],E,E,30,[[[R[271]]]]],[11,R[308],E,E,30,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[307],E,E,29,[[[R[271]]]]],[11,R[308],E,E,29,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[307],E,E,28,[[[R[271]]]]],[11,R[308],E,E,28,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[307],E,E,31,[[[R[271]]]]],[11,R[308],E,E,31,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[307],E,E,6,[[[R[271]]]]],[11,R[308],E,E,6,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[309],E,E,30,[[["self"],[R[310]]]]],[11,R[309],E,E,30,[[["self"],[R[310]]]]],[11,R[309],E,E,29,[[["self"],[R[310]]]]],[11,R[309],E,E,28,[[["self"],[R[310]]]]],[11,"clone_from_with_ptr",E,E,28,[[["self"],["self"],[R[310]]],[R[310]]]],[11,R[309],E,E,31,[[["self"],[R[310]]]]],[11,R[309],E,E,6,[[["self"],[R[310]]]]],[11,R[311],E,E,29,[[[R[271]]],[[R[312]],[R[271],[R[312]]]]]],[11,R[311],E,E,28,[[[R[271]]],[[R[312]],[R[271],[R[312]]]]]],[11,R[311],E,E,31,[[[R[271]]],[[R[312]],[R[271],[R[312]]]]]],[11,R[311],E,E,31,[[[R[271]]],[[R[312]],[R[271],[R[312]]]]]],[11,R[311],E,E,6,[[[R[271],["cowrepr"]],["cowrepr"]],[[R[312]],[R[271],[R[312]]]]]],[11,"new",E,E,28,[[["vec"]],["self"]]],[11,R[313],E,E,28,[[],[R[314]]]],[11,"new",E,E,29,[[["vec"]],["self"]]],[11,R[313],E,E,29,[[],[R[314]]]],[11,R[298],E,E,12,[[],["shape"]]],[11,"f",E,E,12,[[],["self"]]],[11,"set_f",E,E,12,[[["bool"]],["self"]]],[11,"strides",E,E,12,[[["d"]],[R[315]]]],[11,R[316],R[257],E,34,[[["self"]]]],[11,R[316],E,E,8,[[["self"]],["isize"]]],[11,R[316],E,E,9,[[["self"]],["isize"]]],[11,R[316],R[294],E,49,[[["self"]]]],[11,R[316],E,E,50,[[["self"]]]],[11,R[316],E,E,51,[[["self"]]]],[11,R[316],E,E,52,[[["self"]]]],[11,R[317],E,E,53,[[],["ix1"]]],[11,R[317],E,E,27,[[]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,R[322],E,E,26,[[["self"]],["self"]]],[11,R[319],E,E,26,[[]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[325],E,E,26,[[["self"]],[R[2]]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,R[319],E,E,26,[[]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[325],E,E,26,[[["self"]],[R[2]]]],[11,"equal",E,E,26,[[["self"]],["bool"]]],[11,"size",E,E,26,[[["self"]],[R[0]]]],[11,R[321],E,E,26,[[["self"]],[[R[0]],[R[2],[R[0]]]]]],[11,R[326],E,E,26,[[["self"]],["self"]]],[11,R[322],E,E,26,[[["self"]],["self"]]],[11,R[327],E,E,26,[[["self"]],["axis"]]],[11,R[323],E,E,26,[[["self"]],["axis"]]],[11,R[328],E,E,26,[[["self"]],[R[2]]]],[11,R[329],E,R[330],26,[[["self"]],["isize"]]],[11,R[331],E,R[332],26,[[["self"]],[["isize"],[R[2],["isize"]]]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,R[319],E,E,26,[[]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[325],E,E,26,[[["self"]],[R[2]]]],[11,"equal",E,E,26,[[["self"]],["bool"]]],[11,"size",E,E,26,[[["self"]],[R[0]]]],[11,R[321],E,E,26,[[["self"]],[[R[0]],[R[2],[R[0]]]]]],[11,"last_elem",E,E,26,[[["self"]],[R[0]]]],[11,"set_last_elem",E,E,26,[[["self"],[R[0]]]]],[11,R[326],E,E,26,[[["self"]],["self"]]],[11,"fortran_strides",E,E,26,[[["self"]],["self"]]],[11,R[322],E,E,26,[[["self"]],["self"]]],[11,R[327],E,E,26,[[["self"]],["axis"]]],[11,R[328],E,E,26,[[["self"]],[R[2]]]],[11,R[329],E,R[330],26,[[["self"]],["isize"]]],[11,R[331],E,R[332],26,[[["self"]],[["isize"],[R[2],["isize"]]]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,R[319],E,E,26,[[]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,"size",E,E,26,[[["self"]],[R[0]]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[325],E,E,26,[[["self"]],[R[2]]]],[11,R[329],E,R[330],26,[[["self"]],["isize"]]],[11,R[331],E,R[332],26,[[["self"]],[["isize"],[R[2],["isize"]]]]],[11,R[322],E,E,26,[[["self"]],["self"]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,R[319],E,E,26,[[]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,R[319],E,E,26,[[]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,26,[[["self"]],[R[0]]]],[11,R[319],E,E,26,[[]]],[11,"slice",E,E,26,[[["self"]]]],[11,R[318],E,E,26,[[["self"]]]],[11,"zeros",E,E,26,[[[R[0]]],["self"]]],[11,R[320],E,E,26,[[["self"],["axis"]]]],[11,R[324],E,E,26,[[["self"],["axis"]]]],[11,"ndim",E,E,54,[[["self"]],[R[0]]]],[11,"slice",E,E,54,[[["self"]]]],[11,R[318],E,E,54,[[["self"]]]],[11,R[319],E,E,54,[[]]],[11,"zeros",E,E,54,[[[R[0]]],["self"]]],[11,R[320],E,E,54,[[["self"],["axis"]]]],[11,R[324],E,E,54,[[["self"],["axis"]]]],[11,"from_dimension",E,E,54,[[["d2"]],[R[2]]]],[11,R[333],E,E,53,[[["self"],["ix1"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,53,[[["self"],["ix1"]],["isize"]]],[11,R[333],E,E,53,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,53,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[333],E,E,26,[[["self"],["ixdyn"]],[["isize"],[R[2],["isize"]]]]],[11,R[334],E,E,26,[[["self"],["ixdyn"]],["isize"]]],[11,R[296],E,E,26,[[["self"],["axis"]],["self"]]],[11,R[296],E,E,26,[[["self"],["axis"]],["ix0"]]],[11,R[296],E,E,26,[[["self"],["axis"]],["ix1"]]],[11,R[296],E,E,26,[[["self"],["axis"]]]],[11,R[296],E,E,26,[[["self"],["axis"]]]],[11,R[296],E,E,26,[[["self"],["axis"]]]],[11,R[296],E,E,26,[[["self"],["axis"]]]],[11,"dot",E,"Compute the dot product of one-dimensional arrays.",15,[[["self"],[R[271]]],["a"]]],[11,"dot",E,"Perform the matrix multiplication of the row vector `self`…",15,[[["self"],[R[271]]],[["array",["ix1"]],["ix1"]]]],[11,"dot",E,E,15,[[["self"],[R[271]]],["array2"]]],[11,"dot",E,E,15,[[["self"],[R[271]]],[["array",["ix1"]],["ix1"]]]],[11,"index",E,R[335],50,[[["i"]],["a"]]],[11,"get",E,R[335],50,[[["i"]],[[R[2]],["a"]]]],[11,"uget",E,R[335],50,[[["i"]],["a"]]],[11,"default",E,E,15,[[],["self"]]],[11,"default",E,E,26,[[],["dim"]]],[11,"default",E,E,27,[[],[R[337]]]],[11,"len",R[257],E,42,[[["self"]],[R[0]]]],[11,"len",E,E,40,[[["self"]],[R[0]]]],[11,"len",E,E,43,[[["self"]],[R[0]]]],[11,"len",E,E,41,[[["self"]],[R[0]]]],[11,"len",E,E,45,[[["self"]],[R[0]]]],[11,"len",E,E,46,[[["self"]],[R[0]]]],[11,"len",E,E,8,[[["self"]],[R[0]]]],[11,"len",E,E,9,[[["self"]],[R[0]]]],[11,"clone",R[294],E,7,[[["self"]],[R[247]]]],[11,"clone",E,E,3,[[["self"]],[R[256]]]],[11,"clone",R[257],E,35,[[["self"]],["indicesiter"]]],[11,"clone",E,E,34,[[["self"]],["indices"]]],[11,"clone",E,E,36,[[["self"]],["self"]]],[11,"clone",E,E,37,[[["self"]],["self"]]],[11,"clone",E,E,44,[[["self"]],["self"]]],[11,"clone",E,E,48,[[["self"]],["self"]]],[11,"clone",E,E,42,[[["self"]],["self"]]],[11,"clone",E,E,40,[[["self"]],[R[336]]]],[11,"clone",E,E,45,[[["self"]],["self"]]],[11,"clone",E,E,8,[[["self"]],["self"]]],[11,"clone",E,E,10,[[["self"]],["self"]]],[11,"clone",R[294],E,2,[[["self"]],["slice"]]],[11,"clone",E,E,4,[[["self"]],["self"]]],[11,"clone",E,E,13,[[["self"]],["self"]]],[11,"clone",E,E,14,[[["self"]],["zip"]]],[11,"clone",E,E,5,[[["self"]],[R[63]]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone",R[257],E,33,[[["self"]],["self"]]],[11,"clone",R[294],E,0,[[["self"]],["axis"]]],[11,"clone",E,E,26,[[["self"]],["dim"]]],[11,"clone",E,E,27,[[["self"]],[R[337]]]],[11,"clone",E,E,28,[[["self"]],[R[312]]]],[11,"clone",E,E,29,[[["self"]],["self"]]],[11,"clone",E,E,30,[[["self"]],["rawviewrepr"]]],[11,"clone",E,E,31,[[["self"]],["viewrepr"]]],[11,"clone",E,E,15,[[["self"]],[R[271]]]],[11,"clone_from",E,"`Array` implements `.clone_from()` to reuse an array's…",15,[[["self"],["self"]]]],[11,"clone",E,E,12,[[["self"]],["shape"]]],[11,"clone",E,E,32,[[["self"]],[R[315]]]],[11,R[57],R[257],E,42,[[["self"]],[[R[2]],["a"]]]],[11,"nth_back",E,E,42,[[["self"],[R[0]]],[[R[2]],["a"]]]],[11,"rfold",E,E,42,[[["acc"],["g"]],["acc"]]],[11,R[57],E,E,43,[[["self"]],[[R[2]],["a"]]]],[11,"nth_back",E,E,43,[[["self"],[R[0]]],[[R[2]],["a"]]]],[11,"rfold",E,E,43,[[["acc"],["g"]],["acc"]]],[11,R[57],E,E,8,[[["self"]],[R[2]]]],[11,R[57],E,E,9,[[["self"]],[R[2]]]],[11,R[57],E,E,10,[[["self"]],[R[2]]]],[11,R[57],E,E,11,[[["self"]],[R[2]]]],[11,R[57],E,E,33,[[["self"]],[R[2]]]],[11,R[23],R[294],E,13,[[["self"]]]],[11,R[23],E,E,13,[[["self"]],[R[261]]]],[11,R[59],E,E,0,[[["self"],["axis"]],[[R[2],[R[9]]],[R[9]]]]],[11,"lt",E,E,0,[[["self"],["axis"]],["bool"]]],[11,"le",E,E,0,[[["self"],["axis"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["axis"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["axis"]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[271]]],["bool"]]],[11,"eq",E,E,3,[[["self"]],["bool"]]],[11,"eq",E,E,7,[[["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["slice"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["slice"]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[338]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[338]]],["bool"]]],[11,"eq",E,E,0,[[["self"],["axis"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["axis"]],["bool"]]],[11,"eq",E,E,26,[[["self"],["dim"]],["bool"]]],[11,"ne",E,E,26,[[["self"],["dim"]],["bool"]]],[11,"eq",E,E,26,[[["self"],["i"]],["bool"]]],[11,"eq",E,E,27,[[["self"],[R[337]]],["bool"]]],[11,"ne",E,E,27,[[["self"],[R[337]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],["axis"]],[R[9]]]],[11,R[8],E,E,49,[[]]],[11,R[8],E,E,50,[[]]],[11,R[8],R[257],E,34,[[]]],[11,R[8],E,E,36,[[]]],[11,R[8],E,E,39,[[]]],[11,R[8],E,E,44,[[]]],[11,R[8],E,E,47,[[]]],[11,R[8],E,E,48,[[]]],[11,"from",R[294],R[339],15,[[["vec"]],["self"]]],[11,"from",E,"Create a one-dimensional read-only array view of the data…",49,[[["slice"]],["self"]]],[11,"from",E,"Create a read-only array view of the array.",49,[[[R[271]]],["self"]]],[11,"from",E,"Create a one-dimensional read-write array view of the data…",50,[[["slice"]],["self"]]],[11,"from",E,"Create a read-write array view of the array.",50,[[[R[271]]],["self"]]],[11,"from",E,"Converts the `Vec` of arrays to an owned 2-D array.",55,[[["vec"]],["self"]]],[11,"from",E,"Converts the `Vec` of arrays to an owned 3-D array.",56,[[["vec"]],["self"]]],[11,"from",E,"Create a `Shape` from `dimension`, using the default…",12,[[["d"]],["shape"]]],[11,"from",E,E,32,[[[T]],["self"]]],[11,"from",E,E,2,[[["range",["isize"]],["isize"]],["slice"]]],[11,"from",E,E,2,[[["isize"],[R[340],["isize"]]],["slice"]]],[11,"from",E,E,2,[[["isize"],[R[341],["isize"]]],["slice"]]],[11,"from",E,E,2,[[["isize"],[R[343],["isize"]]],["slice"]]],[11,"from",E,E,2,[[["isize"],[R[342],["isize"]]],["slice"]]],[11,"from",E,E,2,[[[R[0]],["range",[R[0]]]],["slice"]]],[11,"from",E,E,2,[[[R[340],[R[0]]],[R[0]]],["slice"]]],[11,"from",E,E,2,[[[R[341],[R[0]]],[R[0]]],["slice"]]],[11,"from",E,E,2,[[[R[343],[R[0]]],[R[0]]],["slice"]]],[11,"from",E,E,2,[[[R[342],[R[0]]],[R[0]]],["slice"]]],[11,"from",E,E,2,[[["range",["i32"]],["i32"]],["slice"]]],[11,"from",E,E,2,[[[R[340],["i32"]],["i32"]],["slice"]]],[11,"from",E,E,2,[[[R[341],["i32"]],["i32"]],["slice"]]],[11,"from",E,E,2,[[[R[343],["i32"]],["i32"]],["slice"]]],[11,"from",E,E,2,[[[R[342],["i32"]],["i32"]],["slice"]]],[11,"from",E,E,4,[[["range",["isize"]],["isize"]],[R[338]]]],[11,"from",E,E,4,[[["isize"],[R[340],["isize"]]],[R[338]]]],[11,"from",E,E,4,[[["isize"],[R[341],["isize"]]],[R[338]]]],[11,"from",E,E,4,[[["isize"],[R[343],["isize"]]],[R[338]]]],[11,"from",E,E,4,[[["isize"],[R[342],["isize"]]],[R[338]]]],[11,"from",E,E,4,[[[R[0]],["range",[R[0]]]],[R[338]]]],[11,"from",E,E,4,[[[R[340],[R[0]]],[R[0]]],[R[338]]]],[11,"from",E,E,4,[[[R[341],[R[0]]],[R[0]]],[R[338]]]],[11,"from",E,E,4,[[[R[343],[R[0]]],[R[0]]],[R[338]]]],[11,"from",E,E,4,[[[R[342],[R[0]]],[R[0]]],[R[338]]]],[11,"from",E,E,4,[[["range",["i32"]],["i32"]],[R[338]]]],[11,"from",E,E,4,[[[R[340],["i32"]],["i32"]],[R[338]]]],[11,"from",E,E,4,[[[R[341],["i32"]],["i32"]],[R[338]]]],[11,"from",E,E,4,[[[R[343],["i32"]],["i32"]],[R[338]]]],[11,"from",E,E,4,[[[R[342],["i32"]],["i32"]],[R[338]]]],[11,"from",E,E,2,[[[R[344]]],["slice"]]],[11,"from",E,E,4,[[[R[344]]],[R[338]]]],[11,"from",E,E,4,[[["slice"]],[R[338]]]],[11,"from",E,E,4,[[["isize"]],[R[338]]]],[11,"from",E,E,4,[[[R[0]]],[R[338]]]],[11,"from",E,E,4,[[["i32"]],[R[338]]]],[11,"from",E,E,27,[[],["self"]]],[11,"from",E,E,27,[[["ix"],["vec",["ix"]]],["self"]]],[11,"from",E,E,57,[[[R[272]]],[R[345]]]],[11,"from",E,E,57,[[["array"]],[R[345]]]],[11,"next",R[257],E,35,[[["self"]],[R[2]]]],[11,R[58],E,E,35,[[["self"]]]],[11,"next",E,E,37,[[["self"]],[R[2]]]],[11,R[58],E,E,37,[[["self"]]]],[11,"next",E,E,38,[[["self"]],[R[2]]]],[11,R[58],E,E,38,[[["self"]]]],[11,"next",E,E,42,[[["self"]],[[R[2]],["a"]]]],[11,R[58],E,E,42,[[["self"]]]],[11,"fold",E,E,42,[[["acc"],["g"]],["acc"]]],[11,"nth",E,E,42,[[["self"],[R[0]]],[R[2]]]],[11,R[64],E,E,42,[[],["b"]]],[11,"all",E,E,42,[[["self"],["f"]],["bool"]]],[11,"any",E,E,42,[[["self"],["f"]],["bool"]]],[11,"find",E,E,42,[[["self"],["p"]],[R[2]]]],[11,"find_map",E,E,42,[[["self"],["f"]],[R[2]]]],[11,"count",E,E,42,[[],[R[0]]]],[11,"last",E,E,42,[[],[R[2]]]],[11,R[62],E,E,42,[[["self"],["p"]],[[R[0]],[R[2],[R[0]]]]]],[11,"next",E,E,40,[[["self"]],[R[2]]]],[11,R[58],E,E,40,[[["self"]]]],[11,"next",E,E,43,[[["self"]],[[R[2]],["a"]]]],[11,R[58],E,E,43,[[["self"]]]],[11,"fold",E,E,43,[[["acc"],["g"]],["acc"]]],[11,"nth",E,E,43,[[["self"],[R[0]]],[R[2]]]],[11,R[64],E,E,43,[[],["b"]]],[11,"all",E,E,43,[[["self"],["f"]],["bool"]]],[11,"any",E,E,43,[[["self"],["f"]],["bool"]]],[11,"find",E,E,43,[[["self"],["p"]],[R[2]]]],[11,"find_map",E,E,43,[[["self"],["f"]],[R[2]]]],[11,"count",E,E,43,[[],[R[0]]]],[11,"last",E,E,43,[[],[R[2]]]],[11,R[62],E,E,43,[[["self"],["p"]],[[R[0]],[R[2],[R[0]]]]]],[11,"next",E,E,41,[[["self"]],[R[2]]]],[11,R[58],E,E,41,[[["self"]]]],[11,"next",E,E,45,[[["self"]],[R[2]]]],[11,R[58],E,E,45,[[["self"]]]],[11,"next",E,E,46,[[["self"]],[R[2]]]],[11,R[58],E,E,46,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[R[2]]]],[11,R[58],E,E,8,[[["self"]]]],[11,"next",E,E,9,[[["self"]],[R[2]]]],[11,R[58],E,E,9,[[["self"]]]],[11,"next",E,E,10,[[["self"]],[R[2]]]],[11,R[58],E,E,10,[[["self"]]]],[11,"next",E,E,11,[[["self"]],[R[2]]]],[11,R[58],E,E,11,[[["self"]]]],[11,"next",E,E,33,[[["self"]],[R[2]]]],[11,"fold",E,E,33,[[["b"],["f"]],["b"]]],[11,R[58],E,E,33,[[["self"]]]],[11,R[60],R[294],E,27,[[["self"]]]],[11,"hash",E,E,15,[[["self"],["h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,26,[[["self"],["__h"]]]],[11,"hash",E,E,27,[[["self"],["__h"]]]],[11,"add",E,E,26,[[],["self"]]],[11,"add",E,E,26,[[["ix"]],["self"]]],[11,"add",E,E,15,[[[R[271]]],[R[271]]]],[11,"add",E,E,15,[[[R[271]]],[R[271]]]],[11,"add",E,E,15,[[["b"]],[R[271]]]],[11,"sub",E,E,26,[[],["self"]]],[11,"sub",E,E,26,[[["ix"]],["self"]]],[11,"sub",E,E,15,[[[R[271]]],[R[271]]]],[11,"sub",E,E,15,[[[R[271]]],[R[271]]]],[11,"sub",E,E,15,[[["b"]],[R[271]]]],[11,"mul",E,E,26,[[],["self"]]],[11,"mul",E,E,26,[[["ix"]],["self"]]],[11,"mul",E,E,15,[[[R[271]]],[R[271]]]],[11,"mul",E,E,15,[[[R[271]]],[R[271]]]],[11,"mul",E,E,15,[[["b"]],[R[271]]]],[11,"div",E,E,15,[[[R[271]]],[R[271]]]],[11,"div",E,E,15,[[[R[271]]],[R[271]]]],[11,"div",E,E,15,[[["b"]],[R[271]]]],[11,"rem",E,E,15,[[[R[271]]],[R[271]]]],[11,"rem",E,E,15,[[[R[271]]],[R[271]]]],[11,"rem",E,E,15,[[["b"]],[R[271]]]],[11,"neg",E,"Perform an elementwise negation of `self` and return the…",15,[[],["self"]]],[11,R[230],E,E,26,[[["self"]]]],[11,R[230],E,E,26,[[["self"],["self"]]]],[11,R[230],E,E,26,[[["self"],["ix"]]]],[11,R[230],E,E,15,[[["self"],[R[271]]]]],[11,R[230],E,E,15,[[["self"],["a"]]]],[11,R[231],E,E,26,[[["self"]]]],[11,R[231],E,E,26,[[["self"],["self"]]]],[11,R[231],E,E,26,[[["self"],["ix"]]]],[11,R[231],E,E,15,[[["self"],[R[271]]]]],[11,R[231],E,E,15,[[["self"],["a"]]]],[11,R[232],E,E,26,[[["self"]]]],[11,R[232],E,E,26,[[["self"],["self"]]]],[11,R[232],E,E,26,[[["self"],["ix"]]]],[11,R[232],E,E,15,[[["self"],[R[271]]]]],[11,R[232],E,E,15,[[["self"],["a"]]]],[11,R[233],E,E,15,[[["self"],[R[271]]]]],[11,R[233],E,E,15,[[["self"],["a"]]]],[11,R[234],E,E,15,[[["self"],[R[271]]]]],[11,R[234],E,E,15,[[["self"],["a"]]]],[11,"not",E,"Perform an elementwise unary not of `self` and return the…",15,[[],["self"]]],[11,"bitand",E,E,15,[[[R[271]]],[R[271]]]],[11,"bitand",E,E,15,[[[R[271]]],[R[271]]]],[11,"bitand",E,E,15,[[["b"]],[R[271]]]],[11,"bitor",E,E,15,[[[R[271]]],[R[271]]]],[11,"bitor",E,E,15,[[[R[271]]],[R[271]]]],[11,"bitor",E,E,15,[[["b"]],[R[271]]]],[11,"bitxor",E,E,15,[[[R[271]]],[R[271]]]],[11,"bitxor",E,E,15,[[[R[271]]],[R[271]]]],[11,"bitxor",E,E,15,[[["b"]],[R[271]]]],[11,"shl",E,E,15,[[[R[271]]],[R[271]]]],[11,"shl",E,E,15,[[[R[271]]],[R[271]]]],[11,"shl",E,E,15,[[["b"]],[R[271]]]],[11,"shr",E,E,15,[[[R[271]]],[R[271]]]],[11,"shr",E,E,15,[[[R[271]]],[R[271]]]],[11,"shr",E,E,15,[[["b"]],[R[271]]]],[11,R[346],E,E,15,[[["self"],[R[271]]]]],[11,R[346],E,E,15,[[["self"],["a"]]]],[11,R[347],E,E,15,[[["self"],[R[271]]]]],[11,R[347],E,E,15,[[["self"],["a"]]]],[11,R[348],E,E,15,[[["self"],[R[271]]]]],[11,R[348],E,E,15,[[["self"],["a"]]]],[11,R[349],E,E,15,[[["self"],[R[271]]]]],[11,R[349],E,E,15,[[["self"],["a"]]]],[11,R[350],E,E,15,[[["self"],[R[271]]]]],[11,R[350],E,E,15,[[["self"],["a"]]]],[11,"deref",E,E,13,[[["self"]]]],[11,"deref",E,E,27,[[["self"]]]],[11,"index",E,E,15,[[["self"],["i"]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,26,[[["self"],[R[0]]]]],[11,"index",E,E,27,[[["self"],["j"]]]],[11,R[351],E,E,15,[[["self"],["i"]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,26,[[["self"],[R[0]]]]],[11,R[351],E,E,27,[[["self"],["j"]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,7,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[257],E,34,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,8,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[294],E,2,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,13,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,14,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,5,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[257],E,33,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",R[294],E,1,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,26,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,27,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,28,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,29,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,12,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,32,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,7,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[7]]]],[11,"from_iter",E,"Create a one-dimensional array from an iterable.",15,[[["i"]],[["ix1"],[R[271],["ix1"]]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,15,[[["self"],[R[10]]],[R[7]]]],[11,R[404],E,E,7,[[["self"]],["str"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[11,"zero",E,E,26,[[],["self"]]],[11,R[352],E,E,26,[[["self"]],["bool"]]],[18,"NDIM",E,R[353],17,N],[11,"size",E,R[354],17,[[["self"]],[R[0]]]],[11,R[321],E,R[355],17,[[["self"]],[[R[0]],[R[2],[R[0]]]]]],[11,R[356],E,R[357],17,[[["self"]],[["ix"],[R[284],["ix"]]]]],[11,R[358],E,R[359],17,[[["self"]],[["ix"],[R[285],["ix"]]]]],[11,R[360],E,R[361],17,[[],["ixdyn"]]],[11,"zeros",E,"Create a new dimension value with `n` axes, all zeros",54,[[[R[0]]],["ixdyn"]]],[11,R[364],E,"Returns the single element in the array without cloning it.",58,[[],["a"]]],[11,"into_raw_vec",E,"Return a vector of the elements in the array, in the way…",58,[[],["vec"]]],[11,R[362],E,"Create a read-only array view borrowing its data from a…",49,[[["sh"]],[[R[247]],[R[7],[R[247]]]]]],[11,R[363],E,"Create an `ArrayView<A, D>` from shape information and a…",49,[[["sh"]],["self"]]],[11,R[362],E,"Create a read-write array view borrowing its data from a…",50,[[["sh"]],[[R[247]],[R[7],[R[247]]]]]],[11,R[363],E,"Create an `ArrayViewMut<A, D>` from shape information and…",50,[[["sh"]],["self"]]],[11,"reborrow",E,"Convert the view into an `ArrayViewMut<'b, A, D>` where…",50,[[],[R[273]]]],[11,"reborrow",E,"Convert the view into an `ArrayView<'b, A, D>` where `'b`…",49,[[],[R[272]]]],[11,R[365],E,R[286],49,[[["self"]],[R[2]]]],[11,"to_slice",E,R[286],49,[[["self"]],[R[2]]]],[11,R[364],E,"Consume the view and return a reference to the single…",49,[[],["a"]]],[11,R[364],E,"Consume the mutable view and return a mutable reference to…",50,[[],["a"]]],[11,R[365],E,R[286],50,[[],[R[2]]]],[11,R[259],E,"Split the array view along `axis` and return one view…",49,[[["ix"],["axis"]]]],[11,R[259],E,"Split the array view along `axis` and return one mutable…",50,[[["ix"],["axis"]]]],[11,R[363],E,"Create an `RawArrayView<A, D>` from shape information and…",51,[[["sh"]],["self"]]],[11,R[366],E,R[367],51,[[],[R[272]]]],[11,R[259],E,R[368],51,[[["ix"],["axis"]]]],[11,R[363],E,"Create an `RawArrayViewMut<A, D>` from shape information…",52,[[["sh"]],["self"]]],[11,R[366],E,R[367],52,[[],[R[272]]]],[11,"deref_into_view_mut",E,"Converts to a mutable view of the array.",52,[[],[R[273]]]],[11,R[259],E,R[368],52,[[["ix"],["axis"]]]],[11,"is_view",E,"Returns `true` iff the array is the view (borrowed) variant.",57,[[["self"]],["bool"]]],[11,"is_owned",E,"Returns `true` iff the array is the owned variant.",57,[[["self"]],["bool"]]]],"p":[[3,"Axis"],[3,R[369]],[3,"Slice"],[4,R[370]],[4,R[371]],[4,R[100]],[4,"CowRepr"],[3,R[372]],[3,"AxisIter"],[3,R[373]],[3,R[374]],[3,R[375]],[3,"Shape"],[3,R[376]],[3,"Zip"],[3,R[377]],[8,"Dot"],[8,R[378]],[8,R[379]],[8,R[380]],[8,R[381]],[8,R[382]],[8,"RawData"],[8,R[383]],[8,R[384]],[8,R[385]],[3,"Dim"],[3,R[386]],[3,R[387]],[3,R[388]],[3,R[389]],[3,"ViewRepr"],[3,R[390]],[3,"Axes"],[3,"Indices"],[3,R[391]],[3,R[392]],[3,R[393]],[3,R[394]],[3,R[395]],[3,R[396]],[3,R[397]],[3,"Iter"],[3,"IterMut"],[3,"Lanes"],[3,R[398]],[3,R[399]],[3,"LanesMut"],[3,"Windows"],[6,R[400]],[6,R[401]],[6,R[402]],[6,R[403]],[6,"Ix"],[6,"IxDyn"],[6,"Array2"],[6,"Array3"],[6,"CowArray"],[6,"Array"]]};
searchIndex["ndarray_unit"]={"doc":"This module provides a struct being a simple…","i":[[3,"Unit","ndarray_unit",E,N,N],[3,R[409],E,E,N,N],[4,"BaseUnit",E,"An enum representing the seven units of the International…",N,N],[13,"METER",E,E,0,N],[13,"SECOND",E,E,0,N],[13,"KILOGRAM",E,E,0,N],[13,"AMPERE",E,E,0,N],[13,"KELVIN",E,E,0,N],[13,"MOLE",E,E,0,N],[13,"CANDELA",E,E,0,N],[13,"RADIAN",E,E,0,N],[13,"STERADIAN",E,E,0,N],[5,"get_meter",E,R[405],N,[[],["unit"]]],[5,"get_second",E,R[405],N,[[],["unit"]]],[5,"get_candela",E,R[405],N,[[],["unit"]]],[5,"get_mole",E,R[405],N,[[],["unit"]]],[5,"get_kelvin",E,R[405],N,[[],["unit"]]],[5,"get_ampere",E,R[405],N,[[],["unit"]]],[5,"get_radian",E,R[405],N,[[],["unit"]]],[5,"get_steradian",E,R[405],N,[[],["unit"]]],[5,"get_newton",E,R[406],N,[[],["unit"]]],[5,"get_joule",E,R[406],N,[[],["unit"]]],[5,"get_watt",E,"Utility method to get the Watt Unit (composed)",N,[[],["unit"]]],[5,"get_volt",E,"Utility method to get the Volt Unit (composed)",N,[[],["unit"]]],[5,"get_ohm",E,"Utility method to get the Ohm Unit (composed)",N,[[],["unit"]]],[5,"get_siemens",E,"Utility method to get the Siemens Unit (composed)",N,[[],["unit"]]],[5,"get_pascal",E,"Utility metgod to get the Pascal Unit (composed)",N,[[],["unit"]]],[5,"get_coulomb",E,R[407],N,[[],["unit"]]],[5,"get_farad",E,R[407],N,[[],["unit"]]],[5,"get_henry",E,"Utility method to get the Henry Unit (composed)",N,[[],["unit"]]],[5,"get_weber",E,"Utility method to get the Weber Unit (composed)",N,[[],["unit"]]],[5,"get_becquerel",E,"Utility method to get the becquerel Unit (composed)",N,[[],["unit"]]],[5,"get_hertz",E,"Utility method to get the Hertz Unit (composed)",N,[[],["unit"]]],[5,"get_tesla",E,"Utility method to get the Tesla Unit (composed)",N,[[],["unit"]]],[11,"new",E,"Return an Unit with an empty set of `BaseUnit`",1,[[],["unit"]]],[11,"from_vec",E,"Create a Unit from a vector of BaseUnit and their power #…",1,[[["vec"]],["unit"]]],[11,"get_base_units",E,E,1,[[["self"]],["hashmap"]]],[11,"get_inverse",E,"Given an `Unit`, return the inverse of this unit. It…",1,[[["self"]],["unit"]]],[11,"add_single_unit",E,"Add a BaseUnit (and its power) to an existing `mut Unit` #…",1,[[["self"],[R[408]],["i32"]]]],[11,"from_array_base",E,E,2,[[[R[271]],["unit"]],["arrayunit"]]],[11,R[305],E,E,1,[[["self"]],[T]]],[11,R[238],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[227],E,E,1,[[["self"]],["string"]]],[11,R[51],E,E,1,[[[U]],[R[7]]]],[11,R[52],E,E,1,[[],[R[7]]]],[11,R[53],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[54],E,E,1,[[["self"]],[R[56]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[227],E,E,2,[[["self"]],["string"]]],[11,R[51],E,E,2,[[[U]],[R[7]]]],[11,R[52],E,E,2,[[],[R[7]]]],[11,R[53],E,E,2,[[["self"]],[T]]],[11,R[55],E,E,2,[[["self"]],[T]]],[11,R[54],E,E,2,[[["self"]],[R[56]]]],[11,R[305],E,E,0,[[["self"]],[T]]],[11,R[238],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,"clone",E,E,0,[[["self"]],[R[408]]]],[11,"clone",E,E,1,[[["self"]],["unit"]]],[11,"eq",E,E,0,[[["self"],[R[408]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["unit"]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[7]]]]],"p":[[4,"BaseUnit"],[3,"Unit"],[3,R[409]]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re",E,"Real portion of the complex number",0,N],[12,"im",E,"Imaginary portion of the complex number",0,N],[3,R[237],E,E,N,N],[6,"Complex32",E,E,N,N],[6,"Complex64",E,E,N,N],[11,"new",E,"Create a new Complex",0,[[[T]],["self"]]],[11,"i",E,"Returns imaginary unit",0,[[],["self"]]],[11,"norm_sqr",E,"Returns the square of the norm (since `T` doesn't…",0,[[["self"]],[T]]],[11,"scale",E,"Multiplies `self` by the scalar `t`.",0,[[["self"],[T]],["self"]]],[11,"unscale",E,"Divides `self` by the scalar `t`.",0,[[["self"],[T]],["self"]]],[11,"powu",E,"Raises `self` to an unsigned integer power.",0,[[["self"],["u32"]],["self"]]],[11,"conj",E,"Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["self"]]],[11,"inv",E,"Returns `1/self`",0,[[["self"]],["self"]]],[11,"powi",E,"Raises `self` to a signed integer power.",0,[[["self"],["i32"]],["self"]]],[11,"l1_norm",E,"Returns the L1 norm `|re| + |im|` -- the [Manhattan…",0,[[["self"]],[T]]],[11,"norm",E,"Calculate |self|",0,[[["self"]],[T]]],[11,"arg",E,"Calculate the principal Arg of self.",0,[[["self"]],[T]]],[11,"to_polar",E,"Convert to polar form (r, theta), such that `self = r *…",0,[[["self"]]]],[11,"from_polar",E,"Convert a polar representation into a complex number.",0,[[[T]],["self"]]],[11,"exp",E,"Computes `e^(self)`, where `e` is the base of the natural…",0,[[["self"]],["self"]]],[11,"ln",E,"Computes the principal value of natural logarithm of `self`.",0,[[["self"]],["self"]]],[11,"sqrt",E,"Computes the principal value of the square root of `self`.",0,[[["self"]],["self"]]],[11,"cbrt",E,"Computes the principal value of the cube root of `self`.",0,[[["self"]],["self"]]],[11,"powf",E,"Raises `self` to a floating point power.",0,[[["self"],[T]],["self"]]],[11,"log",E,"Returns the logarithm of `self` with respect to an…",0,[[["self"],[T]],["self"]]],[11,"powc",E,"Raises `self` to a complex power.",0,[[["self"]],["self"]]],[11,"expf",E,"Raises a floating point number to the complex power `self`.",0,[[["self"],[T]],["self"]]],[11,"sin",E,"Computes the sine of `self`.",0,[[["self"]],["self"]]],[11,"cos",E,"Computes the cosine of `self`.",0,[[["self"]],["self"]]],[11,"tan",E,"Computes the tangent of `self`.",0,[[["self"]],["self"]]],[11,"asin",E,"Computes the principal value of the inverse sine of `self`.",0,[[["self"]],["self"]]],[11,"acos",E,"Computes the principal value of the inverse cosine of…",0,[[["self"]],["self"]]],[11,"atan",E,"Computes the principal value of the inverse tangent of…",0,[[["self"]],["self"]]],[11,"sinh",E,"Computes the hyperbolic sine of `self`.",0,[[["self"]],["self"]]],[11,"cosh",E,"Computes the hyperbolic cosine of `self`.",0,[[["self"]],["self"]]],[11,"tanh",E,"Computes the hyperbolic tangent of `self`.",0,[[["self"]],["self"]]],[11,"asinh",E,"Computes the principal value of inverse hyperbolic sine of…",0,[[["self"]],["self"]]],[11,"acosh",E,"Computes the principal value of inverse hyperbolic cosine…",0,[[["self"]],["self"]]],[11,"atanh",E,"Computes the principal value of inverse hyperbolic tangent…",0,[[["self"]],["self"]]],[11,"finv",E,"Returns `1/self` using floating-point operations.",0,[[["self"]],[R[229]]]],[11,"fdiv",E,"Returns `self/other` using floating-point operations.",0,[[["self"],[R[229]]],[R[229]]]],[11,"is_nan",E,"Checks if the given complex number is NaN",0,[[],["bool"]]],[11,R[133],E,"Checks if the given complex number is infinite",0,[[],["bool"]]],[11,R[134],E,"Checks if the given complex number is finite",0,[[],["bool"]]],[11,R[135],E,"Checks if the given complex number is normal",0,[[],["bool"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,"into",E,E,0,[[],[U]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,R[305],E,E,0,[[["self"]],[T]]],[11,R[238],E,E,0,[[["self"],[T]]]],[11,R[227],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[51],E,E,1,[[[U]],[R[7]]]],[11,"into",E,E,1,[[],[U]]],[11,R[52],E,E,1,[[],[R[7]]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[53],E,E,1,[[["self"]],[T]]],[11,R[54],E,E,1,[[["self"]],[R[56]]]],[11,R[227],E,E,1,[[["self"]],["string"]]],[11,"from",E,E,0,[[[T]],["self"]]],[11,"from",E,E,0,[[[T]],["self"]]],[11,"eq",E,E,0,[[["self"],[R[229]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[229]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[228]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[228]]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"add",E,E,0,[[[R[229]]]]],[11,"add",E,E,0,[[]]],[11,"add",E,E,0,[[[T]]]],[11,"add",E,E,0,[[[T]]]],[11,"sub",E,E,0,[[[R[229]]]]],[11,"sub",E,E,0,[[]]],[11,"sub",E,E,0,[[[T]]]],[11,"sub",E,E,0,[[[T]]]],[11,"mul",E,E,0,[[[R[229]]]]],[11,"mul",E,E,0,[[]]],[11,"mul",E,E,0,[[[T]]]],[11,"mul",E,E,0,[[[T]]]],[11,"div",E,E,0,[[[R[229]]]]],[11,"div",E,E,0,[[]]],[11,"div",E,E,0,[[[T]]]],[11,"div",E,E,0,[[[T]]]],[11,"rem",E,E,0,[[[R[229]]]]],[11,"rem",E,E,0,[[]]],[11,"rem",E,E,0,[[[T]]]],[11,"rem",E,E,0,[[[T]]]],[11,"neg",E,E,0,[[]]],[11,R[230],E,E,0,[[["self"]]]],[11,R[230],E,E,0,[[["self"],[T]]]],[11,R[230],E,E,0,[[["self"],["self"]]]],[11,R[230],E,E,0,[[["self"],[T]]]],[11,R[231],E,E,0,[[["self"]]]],[11,R[231],E,E,0,[[["self"],[T]]]],[11,R[231],E,E,0,[[["self"],["self"]]]],[11,R[231],E,E,0,[[["self"],[T]]]],[11,R[232],E,E,0,[[["self"]]]],[11,R[232],E,E,0,[[["self"],[T]]]],[11,R[232],E,E,0,[[["self"],["self"]]]],[11,R[232],E,E,0,[[["self"],[T]]]],[11,R[233],E,E,0,[[["self"]]]],[11,R[233],E,E,0,[[["self"],[T]]]],[11,R[233],E,E,0,[[["self"],["self"]]]],[11,R[233],E,E,0,[[["self"],[T]]]],[11,R[234],E,E,0,[[["self"]]]],[11,R[234],E,E,0,[[["self"],[T]]]],[11,R[234],E,E,0,[[["self"],["self"]]]],[11,R[234],E,E,0,[[["self"],[T]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[7]]]],[11,"from_str",E,R[235],0,[[["str"]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"product",E,E,0,[[["i"]],["self"]]],[11,"product",E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,"clone",E,E,0,[[["self"]],[R[229]]]],[11,"default",E,E,0,[[],[R[229]]]],[11,R[404],E,E,1,[[["self"]],["str"]]],[11,"to_usize",E,E,0,[[["self"]],[[R[2],[R[0]]],[R[0]]]]],[11,"to_isize",E,E,0,[[["self"]],[["isize"],[R[2],["isize"]]]]],[11,"to_u8",E,E,0,[[["self"]],[[R[2],["u8"]],["u8"]]]],[11,"to_u16",E,E,0,[[["self"]],[["u16"],[R[2],["u16"]]]]],[11,"to_u32",E,E,0,[[["self"]],[["u32"],[R[2],["u32"]]]]],[11,"to_u64",E,E,0,[[["self"]],[[R[2],["u64"]],["u64"]]]],[11,"to_i8",E,E,0,[[["self"]],[[R[2],["i8"]],["i8"]]]],[11,"to_i16",E,E,0,[[["self"]],[["i16"],[R[2],["i16"]]]]],[11,"to_i32",E,E,0,[[["self"]],[["i32"],[R[2],["i32"]]]]],[11,"to_i64",E,E,0,[[["self"]],[["i64"],[R[2],["i64"]]]]],[11,"to_u128",E,E,0,[[["self"]],[["u128"],[R[2],["u128"]]]]],[11,"to_i128",E,E,0,[[["self"]],[[R[2],["i128"]],["i128"]]]],[11,"to_f32",E,E,0,[[["self"]],[["f32"],[R[2],["f32"]]]]],[11,"to_f64",E,E,0,[[["self"]],[[R[2],["f64"]],["f64"]]]],[11,R[241],E,E,0,[[[R[0]]],[R[2]]]],[11,R[239],E,E,0,[[["isize"]],[R[2]]]],[11,"from_u8",E,E,0,[[["u8"]],[R[2]]]],[11,"from_u16",E,E,0,[[["u16"]],[R[2]]]],[11,"from_u32",E,E,0,[[["u32"]],[R[2]]]],[11,"from_u64",E,E,0,[[["u64"]],[R[2]]]],[11,"from_i8",E,E,0,[[["i8"]],[R[2]]]],[11,"from_i16",E,E,0,[[["i16"]],[R[2]]]],[11,"from_i32",E,E,0,[[["i32"]],[R[2]]]],[11,"from_i64",E,E,0,[[["i64"]],[R[2]]]],[11,R[242],E,E,0,[[["u128"]],[R[2]]]],[11,R[240],E,E,0,[[["i128"]],[R[2]]]],[11,"from_f32",E,E,0,[[["f32"]],[R[2]]]],[11,"from_f64",E,E,0,[[["f64"]],[R[2]]]],[11,"from",E,E,0,[[[R[243]]],[R[2]]]],[11,"as_",E,E,0,[[],[U]]],[11,R[244],E,R[235],0,[[["u32"],["str"]],[R[7]]]],[11,"zero",E,E,0,[[],["self"]]],[11,R[352],E,E,0,[[["self"]],["bool"]]],[11,"set_zero",E,E,0,[[["self"]]]],[11,"one",E,E,0,[[],["self"]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,"set_one",E,E,0,[[["self"]]]],[11,"inv",E,E,0,[[]]],[11,"mul_add",E,E,0,[[[R[229]]],[R[229]]]],[11,R[236],E,E,0,[[["self"],[R[229]]]]],[11,R[236],E,E,0,[[["self"],[R[229]]]]],[11,"pow",E,E,0,[[["f32"]]]],[11,"pow",E,E,0,[[["f32"]]]],[11,"pow",E,E,0,[[["f64"]]]],[11,"pow",E,E,0,[[["f64"]]]],[11,"pow",E,E,0,[[[R[229]]]]],[11,"pow",E,E,0,[[[R[229]]]]]],"p":[[3,"Complex"],[3,R[237]]]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","i":[[3,R[225],"num_integer","Greatest common divisor and Bézout coefficients",N,N],[12,"gcd",E,E,0,N],[12,"x",E,E,0,N],[12,"y",E,E,0,N],[3,R[226],E,"An iterator over binomial coefficients.",N,N],[5,"cbrt",E,R[220],N,[[["roots"]],["roots"]]],[5,"nth_root",E,R[218],N,[[["u32"],["roots"]],["roots"]]],[5,"sqrt",E,R[219],N,[[["roots"]],["roots"]]],[5,"div_rem",E,"Simultaneous integer division and modulus",N,[[[R[217]]]]],[5,R[221],E,"Floored integer division",N,[[[R[217]]],[R[217]]]],[5,R[222],E,"Floored integer modulus",N,[[[R[217]]],[R[217]]]],[5,R[223],E,"Simultaneous floored integer division and modulus",N,[[[R[217]]]]],[5,"div_ceil",E,"Ceiled integer division",N,[[[R[217]]],[R[217]]]],[5,"gcd",E,"Calculates the Greatest Common Divisor (GCD) of the number…",N,[[[R[217]]],[R[217]]]],[5,"lcm",E,"Calculates the Lowest Common Multiple (LCM) of the number…",N,[[[R[217]]],[R[217]]]],[5,"gcd_lcm",E,"Calculates the Greatest Common Divisor (GCD) and Lowest…",N,[[[R[217]]]]],[5,"binomial",E,"Calculate the binomial coefficient.",N,[[[R[217]],["clone"]],[["clone"],[R[217]]]]],[5,"multinomial",E,"Calculate the multinomial coefficient.",N,[[],[["clone"],[R[217]]]]],[8,"Roots",E,"Provides methods to compute an integer's square root, cube…",N,N],[10,"nth_root",E,R[218],1,[[["self"],["u32"]],["self"]]],[11,"sqrt",E,R[219],1,[[["self"]],["self"]]],[11,"cbrt",E,R[220],1,[[["self"]],["self"]]],[8,"Integer",E,E,N,N],[10,R[221],E,"Floored integer division.",2,[[["self"]],["self"]]],[10,R[222],E,"Floored integer modulo, satisfying:",2,[[["self"]],["self"]]],[11,"div_ceil",E,"Ceiled integer division.",2,[[["self"]],["self"]]],[10,"gcd",E,"Greatest Common Divisor (GCD).",2,[[["self"]],["self"]]],[10,"lcm",E,"Lowest Common Multiple (LCM).",2,[[["self"]],["self"]]],[11,"gcd_lcm",E,"Greatest Common Divisor (GCD) and Lowest Common Multiple…",2,[[["self"]]]],[11,"extended_gcd",E,"Greatest common divisor and Bézout coefficients.",2,[[["self"]],[R[224]]]],[11,"extended_gcd_lcm",E,"Greatest common divisor, least common multiple, and Bézout…",2,[[["self"]]]],[10,"divides",E,"Deprecated, use `is_multiple_of` instead.",2,[[["self"]],["bool"]]],[10,"is_multiple_of",E,"Returns `true` if `self` is a multiple of `other`.",2,[[["self"]],["bool"]]],[10,"is_even",E,"Returns `true` if the number is even.",2,[[["self"]],["bool"]]],[10,"is_odd",E,"Returns `true` if the number is odd.",2,[[["self"]],["bool"]]],[10,"div_rem",E,"Simultaneous truncated integer division and modulus.…",2,[[["self"]]]],[11,R[223],E,"Simultaneous floored integer division and modulus. Returns…",2,[[["self"]]]],[11,"next_multiple_of",E,"Rounds up to nearest multiple of argument.",2,[[["self"]],["self"]]],[11,"prev_multiple_of",E,"Rounds down to nearest multiple of argument.",2,[[["self"]],["self"]]],[11,"new",E,"For a given n, iterate over all binomial coefficients…",3,[[[T]],["iterbinomial"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,"into",E,E,0,[[],[U]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,R[305],E,E,0,[[["self"]],[T]]],[11,R[238],E,E,0,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[51],E,E,3,[[[U]],[R[7]]]],[11,"into",E,E,3,[[],[U]]],[11,R[52],E,E,3,[[],[R[7]]]],[11,R[8],E,E,3,[[],["i"]]],[11,R[55],E,E,3,[[["self"]],[T]]],[11,R[53],E,E,3,[[["self"]],[T]]],[11,R[54],E,E,3,[[["self"]],[R[56]]]],[11,"eq",E,E,0,[[["self"],[R[224]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[224]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"next",E,E,3,[[["self"]],[R[2]]]],[11,"clone",E,E,0,[[["self"]],[R[224]]]],[11,"sqrt",E,R[219],1,[[["self"]],["self"]]],[11,"cbrt",E,R[220],1,[[["self"]],["self"]]]],"p":[[3,R[225]],[8,"Roots"],[8,"Integer"],[3,R[226]]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","i":[[3,R[195],R[123],E,N,N],[12,"kind",E,E,0,N],[4,R[196],E,E,N,N],[13,"Empty",E,E,1,N],[13,"Invalid",E,E,1,N],[5,"clamp",E,"A value bounded by a minimum and a maximum",N,[[[R[122]]],[R[122]]]],[5,"clamp_min",E,"A value bounded by a minimum value",N,[[[R[122]]],[R[122]]]],[5,"clamp_max",E,"A value bounded by a maximum value",N,[[[R[122]]],[R[122]]]],[0,"bounds",E,E,N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,R[124],E,"returns the smallest finite number this type can represent",2,[[],["self"]]],[10,R[125],E,"returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast",R[123],E,N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["numcast"]],[[R[2]],["numcast"]]]],[8,R[197],E,"A generic trait for converting a value to a number.",N,N],[11,"to_isize",E,"Converts the value of `self` to an `isize`. If the value…",3,[[["self"]],[["isize"],[R[2],["isize"]]]]],[11,"to_i8",E,"Converts the value of `self` to an `i8`. If the value…",3,[[["self"]],[[R[2],["i8"]],["i8"]]]],[11,"to_i16",E,"Converts the value of `self` to an `i16`. If the value…",3,[[["self"]],[["i16"],[R[2],["i16"]]]]],[11,"to_i32",E,"Converts the value of `self` to an `i32`. If the value…",3,[[["self"]],[["i32"],[R[2],["i32"]]]]],[10,"to_i64",E,"Converts the value of `self` to an `i64`. If the value…",3,[[["self"]],[["i64"],[R[2],["i64"]]]]],[11,"to_i128",E,"Converts the value of `self` to an `i128`. If the value…",3,[[["self"]],[[R[2],["i128"]],["i128"]]]],[11,"to_usize",E,"Converts the value of `self` to a `usize`. If the value…",3,[[["self"]],[[R[2],[R[0]]],[R[0]]]]],[11,"to_u8",E,"Converts the value of `self` to a `u8`. If the value…",3,[[["self"]],[[R[2],["u8"]],["u8"]]]],[11,"to_u16",E,"Converts the value of `self` to a `u16`. If the value…",3,[[["self"]],[["u16"],[R[2],["u16"]]]]],[11,"to_u32",E,"Converts the value of `self` to a `u32`. If the value…",3,[[["self"]],[["u32"],[R[2],["u32"]]]]],[10,"to_u64",E,"Converts the value of `self` to a `u64`. If the value…",3,[[["self"]],[[R[2],["u64"]],["u64"]]]],[11,"to_u128",E,"Converts the value of `self` to a `u128`. If the value…",3,[[["self"]],[["u128"],[R[2],["u128"]]]]],[11,"to_f32",E,"Converts the value of `self` to an `f32`. If the value…",3,[[["self"]],[["f32"],[R[2],["f32"]]]]],[11,"to_f64",E,"Converts the value of `self` to an `f64`. If the value…",3,[[["self"]],[[R[2],["f64"]],["f64"]]]],[8,R[198],E,"A generic trait for converting a number to a value.",N,N],[11,R[239],E,"Converts an `isize` to return an optional value of this…",4,[[["isize"]],[R[2]]]],[11,"from_i8",E,"Converts an `i8` to return an optional value of this type.…",4,[[["i8"]],[R[2]]]],[11,"from_i16",E,"Converts an `i16` to return an optional value of this…",4,[[["i16"]],[R[2]]]],[11,"from_i32",E,"Converts an `i32` to return an optional value of this…",4,[[["i32"]],[R[2]]]],[10,"from_i64",E,"Converts an `i64` to return an optional value of this…",4,[[["i64"]],[R[2]]]],[11,R[240],E,"Converts an `i128` to return an optional value of this…",4,[[["i128"]],[R[2]]]],[11,R[241],E,"Converts a `usize` to return an optional value of this…",4,[[[R[0]]],[R[2]]]],[11,"from_u8",E,"Converts an `u8` to return an optional value of this type.…",4,[[["u8"]],[R[2]]]],[11,"from_u16",E,"Converts an `u16` to return an optional value of this…",4,[[["u16"]],[R[2]]]],[11,"from_u32",E,"Converts an `u32` to return an optional value of this…",4,[[["u32"]],[R[2]]]],[10,"from_u64",E,"Converts an `u64` to return an optional value of this…",4,[[["u64"]],[R[2]]]],[11,R[242],E,"Converts an `u128` to return an optional value of this…",4,[[["u128"]],[R[2]]]],[11,"from_f32",E,"Converts a `f32` to return an optional value of this type.…",4,[[["f32"]],[R[2]]]],[11,"from_f64",E,"Converts a `f64` to return an optional value of this type.…",4,[[["f64"]],[R[2]]]],[8,"NumCast",E,"An interface for casting between machine scalars.",N,N],[10,"from",E,"Creates a number from another value that can be converted…",5,[[[R[243]]],[R[2]]]],[8,R[199],E,"A generic interface for casting between machine scalars…",N,N],[10,"as_",E,"Convert a value to another, using the `as` operator.",6,[[],[T]]],[0,"float",R[123],E,N,N],[8,R[200],"num_traits::float","Generic trait for floating point numbers that works with…",N,N],[10,"infinity",E,"Returns positive infinity.",7,[[],["self"]]],[10,R[126],E,"Returns negative infinity.",7,[[],["self"]]],[10,"nan",E,"Returns NaN.",7,[[],["self"]]],[10,"neg_zero",E,R[127],7,[[],["self"]]],[10,R[124],E,R[128],7,[[],["self"]]],[10,R[129],E,R[130],7,[[],["self"]]],[10,"epsilon",E,R[131],7,[[],["self"]]],[10,R[125],E,R[132],7,[[],["self"]]],[11,"is_nan",E,"Returns `true` if the number is NaN.",7,[[],["bool"]]],[11,R[133],E,"Returns `true` if the number is infinite.",7,[[],["bool"]]],[11,R[134],E,"Returns `true` if the number is neither infinite or NaN.",7,[[],["bool"]]],[11,R[135],E,R[136],7,[[],["bool"]]],[10,"classify",E,R[137],7,[[],[R[138]]]],[11,"floor",E,R[139],7,[[],["self"]]],[11,"ceil",E,R[140],7,[[],["self"]]],[11,"round",E,R[141],7,[[],["self"]]],[11,"trunc",E,R[142],7,[[],["self"]]],[11,"fract",E,R[143],7,[[],["self"]]],[11,"abs",E,R[144],7,[[],["self"]]],[11,"signum",E,R[145],7,[[],["self"]]],[11,R[146],E,"Returns `true` if `self` is positive, including `+0.0` and…",7,[[],["bool"]]],[11,R[147],E,"Returns `true` if `self` is negative, including `-0.0` and…",7,[[],["bool"]]],[11,"min",E,R[152],7,[[],["self"]]],[11,"max",E,R[151],7,[[],["self"]]],[11,"recip",E,"Returns the reciprocal (multiplicative inverse) of the…",7,[[],["self"]]],[11,"powi",E,R[148],7,[[["i32"]],["self"]]],[10,R[149],E,"Converts to degrees, assuming the number is in radians.",7,[[],["self"]]],[10,R[150],E,"Converts to radians, assuming the number is in degrees.",7,[[],["self"]]],[10,R[153],E,R[154],7,[[]]],[8,"Float",E,"Generic trait for floating point numbers",N,N],[10,"nan",E,"Returns the `NaN` value.",8,[[],["self"]]],[10,"infinity",E,"Returns the infinite value.",8,[[],["self"]]],[10,R[126],E,"Returns the negative infinite value.",8,[[],["self"]]],[10,"neg_zero",E,R[127],8,[[],["self"]]],[10,R[124],E,R[128],8,[[],["self"]]],[10,R[129],E,R[130],8,[[],["self"]]],[11,"epsilon",E,R[131],8,[[],["self"]]],[10,R[125],E,R[132],8,[[],["self"]]],[10,"is_nan",E,"Returns `true` if this value is `NaN` and false otherwise.",8,[[],["bool"]]],[10,R[133],E,"Returns `true` if this value is positive infinity or…",8,[[],["bool"]]],[10,R[134],E,"Returns `true` if this number is neither infinite nor `NaN`.",8,[[],["bool"]]],[10,R[135],E,R[136],8,[[],["bool"]]],[10,"classify",E,R[137],8,[[],[R[138]]]],[10,"floor",E,R[139],8,[[],["self"]]],[10,"ceil",E,R[140],8,[[],["self"]]],[10,"round",E,R[141],8,[[],["self"]]],[10,"trunc",E,R[142],8,[[],["self"]]],[10,"fract",E,R[143],8,[[],["self"]]],[10,"abs",E,R[144],8,[[],["self"]]],[10,"signum",E,R[145],8,[[],["self"]]],[10,R[146],E,R[162],8,[[],["bool"]]],[10,R[147],E,R[163],8,[[],["bool"]]],[10,"mul_add",E,R[158],8,[[],["self"]]],[10,"recip",E,R[164],8,[[],["self"]]],[10,"powi",E,R[148],8,[[["i32"]],["self"]]],[10,"powf",E,"Raise a number to a floating point power.",8,[[],["self"]]],[10,"sqrt",E,R[165],8,[[],["self"]]],[10,"exp",E,R[166],8,[[],["self"]]],[10,"exp2",E,R[167],8,[[],["self"]]],[10,"ln",E,R[168],8,[[],["self"]]],[10,"log",E,R[169],8,[[],["self"]]],[10,"log2",E,R[170],8,[[],["self"]]],[10,"log10",E,R[171],8,[[],["self"]]],[11,R[149],E,R[172],8,[[],["self"]]],[11,R[150],E,R[173],8,[[],["self"]]],[10,"max",E,R[151],8,[[],["self"]]],[10,"min",E,R[152],8,[[],["self"]]],[10,"abs_sub",E,R[174],8,[[],["self"]]],[10,"cbrt",E,R[175],8,[[],["self"]]],[10,"hypot",E,R[176],8,[[],["self"]]],[10,"sin",E,R[177],8,[[],["self"]]],[10,"cos",E,R[178],8,[[],["self"]]],[10,"tan",E,R[179],8,[[],["self"]]],[10,"asin",E,R[180],8,[[],["self"]]],[10,"acos",E,R[181],8,[[],["self"]]],[10,"atan",E,R[182],8,[[],["self"]]],[10,"atan2",E,R[183],8,[[],["self"]]],[10,"sin_cos",E,R[184],8,[[]]],[10,"exp_m1",E,R[185],8,[[],["self"]]],[10,"ln_1p",E,R[186],8,[[],["self"]]],[10,"sinh",E,R[187],8,[[],["self"]]],[10,"cosh",E,R[188],8,[[],["self"]]],[10,"tanh",E,R[189],8,[[],["self"]]],[10,"asinh",E,R[190],8,[[],["self"]]],[10,"acosh",E,R[191],8,[[],["self"]]],[10,"atanh",E,R[192],8,[[],["self"]]],[10,R[153],E,R[154],8,[[]]],[8,R[201],E,E,N,N],[10,"E",E,"Return Euler’s number.",9,[[],["self"]]],[10,"FRAC_1_PI",E,"Return `1.0 / π`.",9,[[],["self"]]],[10,"FRAC_1_SQRT_2",E,"Return `1.0 / sqrt(2.0)`.",9,[[],["self"]]],[10,"FRAC_2_PI",E,"Return `2.0 / π`.",9,[[],["self"]]],[10,"FRAC_2_SQRT_PI",E,"Return `2.0 / sqrt(π)`.",9,[[],["self"]]],[10,"FRAC_PI_2",E,"Return `π / 2.0`.",9,[[],["self"]]],[10,"FRAC_PI_3",E,"Return `π / 3.0`.",9,[[],["self"]]],[10,"FRAC_PI_4",E,"Return `π / 4.0`.",9,[[],["self"]]],[10,"FRAC_PI_6",E,"Return `π / 6.0`.",9,[[],["self"]]],[10,"FRAC_PI_8",E,"Return `π / 8.0`.",9,[[],["self"]]],[10,"LN_10",E,"Return `ln(10.0)`.",9,[[],["self"]]],[10,"LN_2",E,"Return `ln(2.0)`.",9,[[],["self"]]],[10,"LOG10_E",E,"Return `log10(e)`.",9,[[],["self"]]],[10,"LOG2_E",E,"Return `log2(e)`.",9,[[],["self"]]],[10,"PI",E,"Return Archimedes’ constant.",9,[[],["self"]]],[10,"SQRT_2",E,"Return `sqrt(2.0)`.",9,[[],["self"]]],[0,"identities",R[123],E,N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["zero"]]],[5,"one",E,"Returns the multiplicative identity, `1`.",N,[[],["one"]]],[8,"Zero",E,"Defines an additive identity element for `Self`.",N,N],[10,"zero",E,"Returns the additive identity element of `Self`, `0`. #…",10,[[],["self"]]],[11,"set_zero",E,"Sets `self` to the additive identity element of `Self`, `0`.",10,[[["self"]]]],[10,R[352],E,"Returns `true` if `self` is equal to the additive identity.",10,[[["self"]],["bool"]]],[8,"One",E,"Defines a multiplicative identity element for `Self`.",N,N],[10,"one",E,"Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"set_one",E,"Sets `self` to the multiplicative identity element of…",11,[[["self"]]]],[11,"is_one",E,"Returns `true` if `self` is equal to the multiplicative…",11,[[["self"]],["bool"]]],[0,"int",R[123],E,N,N],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",N,N],[10,"count_ones",E,"Returns the number of ones in the binary representation of…",12,[[],["u32"]]],[10,"count_zeros",E,"Returns the number of zeros in the binary representation…",12,[[],["u32"]]],[10,"leading_zeros",E,"Returns the number of leading zeros in the binary…",12,[[],["u32"]]],[10,"trailing_zeros",E,"Returns the number of trailing zeros in the binary…",12,[[],["u32"]]],[10,"rotate_left",E,R[155],12,[[["u32"]],["self"]]],[10,"rotate_right",E,R[156],12,[[["u32"]],["self"]]],[10,"signed_shl",E,R[155],12,[[["u32"]],["self"]]],[10,"signed_shr",E,R[156],12,[[["u32"]],["self"]]],[10,"unsigned_shl",E,R[155],12,[[["u32"]],["self"]]],[10,"unsigned_shr",E,R[156],12,[[["u32"]],["self"]]],[10,"swap_bytes",E,"Reverses the byte order of the integer.",12,[[],["self"]]],[10,"from_be",E,"Convert an integer from big endian to the target's…",12,[[],["self"]]],[10,"from_le",E,"Convert an integer from little endian to the target's…",12,[[],["self"]]],[10,"to_be",E,"Convert `self` to big endian from the target's endianness.",12,[[],["self"]]],[10,"to_le",E,"Convert `self` to little endian from the target's…",12,[[],["self"]]],[10,"pow",E,"Raises self to the power of `exp`, using exponentiation by…",12,[[["u32"]],["self"]]],[0,"ops",R[123],E,N,N],[0,"checked",R[157],E,N,N],[8,R[202],"num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",N,N],[10,"checked_add",E,"Adds two numbers, checking for overflow. If overflow…",13,[[["self"]],[R[2]]]],[8,R[203],E,"Performs subtraction that returns `None` instead of…",N,N],[10,"checked_sub",E,"Subtracts two numbers, checking for underflow. If…",14,[[["self"]],[R[2]]]],[8,R[204],E,"Performs multiplication that returns `None` instead of…",N,N],[10,"checked_mul",E,"Multiplies two numbers, checking for underflow or…",15,[[["self"]],[R[2]]]],[8,R[205],E,"Performs division that returns `None` instead of panicking…",N,N],[10,"checked_div",E,"Divides two numbers, checking for underflow, overflow and…",16,[[["self"]],[R[2]]]],[8,R[206],E,"Performs an integral remainder that returns `None` instead…",N,N],[10,"checked_rem",E,"Finds the remainder of dividing two numbers, checking for…",17,[[["self"]],[R[2]]]],[8,R[207],E,"Performs negation that returns `None` if the result can't…",N,N],[10,"checked_neg",E,"Negates a number, returning `None` for results that can't…",18,[[["self"]],[R[2]]]],[8,R[208],E,"Performs a left shift that returns `None` on shifts larger…",N,N],[10,"checked_shl",E,"Checked shift left. Computes `self << rhs`, returning…",19,[[["self"],["u32"]],[R[2]]]],[8,R[209],E,"Performs a right shift that returns `None` on shifts…",N,N],[10,"checked_shr",E,"Checked shift right. Computes `self >> rhs`, returning…",20,[[["self"],["u32"]],[R[2]]]],[0,"inv",R[157],E,N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",N,N],[16,"Output",E,R[161],21,N],[10,"inv",E,"Returns the multiplicative inverse of `self`.",21,[[]]],[0,"mul_add",R[157],E,N,N],[8,"MulAdd","num_traits::ops::mul_add",R[158],N,N],[16,"Output",E,"The resulting type after applying the fused multiply-add.",22,N],[10,"mul_add",E,R[159],22,[[["a"],["b"]]]],[8,R[210],E,"The fused multiply-add assignment operation.",N,N],[10,R[236],E,R[159],23,[[["self"],["a"],["b"]]]],[0,"saturating",R[157],E,N,N],[8,R[211],"num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add",E,"Saturating addition operator. Returns a+b, saturating at…",24,[[],["self"]]],[10,"saturating_sub",E,"Saturating subtraction operator. Returns a-b, saturating…",24,[[],["self"]]],[0,"wrapping",R[157],E,N,N],[8,R[212],"num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add",E,"Wrapping (modular) addition. Computes `self + other`,…",25,[[["self"]],["self"]]],[8,R[213],E,"Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub",E,"Wrapping (modular) subtraction. Computes `self - other`,…",26,[[["self"]],["self"]]],[8,R[214],E,"Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul",E,"Wrapping (modular) multiplication. Computes `self *…",27,[[["self"]],["self"]]],[8,R[215],E,"Performs a left shift that does not panic.",N,N],[10,"wrapping_shl",E,"Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",28,[[["self"],["u32"]],["self"]]],[8,R[216],E,"Performs a right shift that does not panic.",N,N],[10,"wrapping_shr",E,"Panic-free bitwise shift-right; yields `self >>…",29,[[["self"],["u32"]],["self"]]],[0,"pow",R[123],E,N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",N,[[[R[0]],["clone"],["one"],["mul"]],[["one"],["clone"],["mul"]]]],[5,"checked_pow",E,"Raises a value to the power of exp, returning `None` if an…",N,[[[R[160]],["clone"],["one"],[R[0]]],[[R[2]],[R[160]],["one"],["clone"]]]],[8,"Pow",E,"Binary operator for raising a value to a power.",N,N],[16,"Output",E,R[161],30,N],[10,"pow",E,"Returns `self` to the power `rhs`.",30,[[["rhs"]]]],[0,"real",R[123],E,N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",N,N],[10,R[124],E,R[128],31,[[],["self"]]],[10,R[129],E,R[130],31,[[],["self"]]],[10,"epsilon",E,R[131],31,[[],["self"]]],[10,R[125],E,R[132],31,[[],["self"]]],[10,"floor",E,R[139],31,[[],["self"]]],[10,"ceil",E,R[140],31,[[],["self"]]],[10,"round",E,R[141],31,[[],["self"]]],[10,"trunc",E,R[142],31,[[],["self"]]],[10,"fract",E,R[143],31,[[],["self"]]],[10,"abs",E,R[144],31,[[],["self"]]],[10,"signum",E,R[145],31,[[],["self"]]],[10,R[146],E,R[162],31,[[],["bool"]]],[10,R[147],E,R[163],31,[[],["bool"]]],[10,"mul_add",E,R[158],31,[[],["self"]]],[10,"recip",E,R[164],31,[[],["self"]]],[10,"powi",E,R[148],31,[[["i32"]],["self"]]],[10,"powf",E,"Raise a number to a real number power.",31,[[],["self"]]],[10,"sqrt",E,R[165],31,[[],["self"]]],[10,"exp",E,R[166],31,[[],["self"]]],[10,"exp2",E,R[167],31,[[],["self"]]],[10,"ln",E,R[168],31,[[],["self"]]],[10,"log",E,R[169],31,[[],["self"]]],[10,"log2",E,R[170],31,[[],["self"]]],[10,"log10",E,R[171],31,[[],["self"]]],[10,R[149],E,R[172],31,[[],["self"]]],[10,R[150],E,R[173],31,[[],["self"]]],[10,"max",E,R[151],31,[[],["self"]]],[10,"min",E,R[152],31,[[],["self"]]],[10,"abs_sub",E,R[174],31,[[],["self"]]],[10,"cbrt",E,R[175],31,[[],["self"]]],[10,"hypot",E,R[176],31,[[],["self"]]],[10,"sin",E,R[177],31,[[],["self"]]],[10,"cos",E,R[178],31,[[],["self"]]],[10,"tan",E,R[179],31,[[],["self"]]],[10,"asin",E,R[180],31,[[],["self"]]],[10,"acos",E,R[181],31,[[],["self"]]],[10,"atan",E,R[182],31,[[],["self"]]],[10,"atan2",E,R[183],31,[[],["self"]]],[10,"sin_cos",E,R[184],31,[[]]],[10,"exp_m1",E,R[185],31,[[],["self"]]],[10,"ln_1p",E,R[186],31,[[],["self"]]],[10,"sinh",E,R[187],31,[[],["self"]]],[10,"cosh",E,R[188],31,[[],["self"]]],[10,"tanh",E,R[189],31,[[],["self"]]],[10,"asinh",E,R[190],31,[[],["self"]]],[10,"acosh",E,R[191],31,[[],["self"]]],[10,"atanh",E,R[192],31,[[],["self"]]],[0,"sign",R[123],E,N,N],[5,"abs","num_traits::sign",R[193],N,[[["signed"]],["signed"]]],[5,"abs_sub",E,R[174],N,[[["signed"]],["signed"]]],[5,"signum",E,R[194],N,[[["signed"]],["signed"]]],[8,"Signed",E,"Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs",E,R[193],32,[[["self"]],["self"]]],[10,"abs_sub",E,R[174],32,[[["self"]],["self"]]],[10,"signum",E,R[194],32,[[["self"]],["self"]]],[10,"is_positive",E,"Returns true if the number is positive and false if the…",32,[[["self"]],["bool"]]],[10,"is_negative",E,"Returns true if the number is negative and false if the…",32,[[["self"]],["bool"]]],[8,"Unsigned",E,"A trait for values which cannot be negative",N,N],[8,"Num",R[123],"The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr",E,E,33,N],[10,R[244],E,"Convert from a string and radix <= 36.",33,[[["u32"],["str"]],[R[7]]]],[8,"NumOps",E,"The trait for types implementing basic numeric operations",N,N],[8,"NumRef",E,"The trait for `Num` types which also implement numeric…",N,N],[8,"RefNum",E,"The trait for references which implement numeric…",N,N],[8,"NumAssignOps",E,"The trait for types implementing numeric assignment…",N,N],[8,"NumAssign",E,"The trait for `Num` types which also implement assignment…",N,N],[8,"NumAssignRef",E,"The trait for `NumAssign` types which also implement…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[51],E,E,0,[[[U]],[R[7]]]],[11,"into",E,E,0,[[],[U]]],[11,R[52],E,E,0,[[],[R[7]]]],[11,R[55],E,E,0,[[["self"]],[T]]],[11,R[53],E,E,0,[[["self"]],[T]]],[11,R[54],E,E,0,[[["self"]],[R[56]]]],[11,R[227],E,E,0,[[["self"]],["string"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[51],E,E,1,[[[U]],[R[7]]]],[11,"into",E,E,1,[[],[U]]],[11,R[52],E,E,1,[[],[R[7]]]],[11,R[55],E,E,1,[[["self"]],[T]]],[11,R[53],E,E,1,[[["self"]],[T]]],[11,R[54],E,E,1,[[["self"]],[R[56]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[7]]]]],"p":[[3,R[195]],[4,R[196]],[8,"Bounded"],[8,R[197]],[8,R[198]],[8,"NumCast"],[8,R[199]],[8,R[200]],[8,"Float"],[8,R[201]],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,R[202]],[8,R[203]],[8,R[204]],[8,R[205]],[8,R[206]],[8,R[207]],[8,R[208]],[8,R[209]],[8,"Inv"],[8,"MulAdd"],[8,R[210]],[8,R[211]],[8,R[212]],[8,R[213]],[8,R[214]],[8,R[215]],[8,R[216]],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex["rawpointer"]={"doc":"Rawpointer adds extra utility methods to raw pointers…","i":[[5,"ptrdistance","rawpointer","Return the number of elements of `T` from `start` to…",N,[[],[R[0]]]],[8,R[1],E,"Extension methods for raw pointers",N,N],[10,"offset",E,E,0,[[["isize"]],["self"]]],[11,"add",E,E,0,[[[R[0]]],["self"]]],[11,"sub",E,E,0,[[[R[0]]],["self"]]],[11,"pre_inc",E,"Increment the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_inc",E,"Increment the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"pre_dec",E,"Decrement the pointer by 1, and return its new value.",0,[[["self"]],["self"]]],[11,"post_dec",E,"Decrement the pointer by 1, but return its old value.",0,[[["self"]],["self"]]],[11,"inc",E,"Increment by 1",0,[[["self"]]]],[11,"dec",E,"Decrement by 1",0,[[["self"]]]],[11,R[329],E,"Offset the pointer by `s` multiplied by `index`.",0,[[["isize"],[R[0]]],["self"]]]],"p":[[8,R[1]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);